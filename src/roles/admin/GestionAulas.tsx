import { useState, useEffect } from 'react';
import { 
  Search, Plus, Edit, X, MapPin, Building2, Calendar, Grid, List, ChevronLeft, ChevronRight
} from 'lucide-react';
import { StyledSelect } from '../../components/StyledSelect';
import GlassEffect from '../../components/GlassEffect';
import { mapToRedScheme, RedColorPalette } from '../../utils/colorMapper';
import { useBreakpoints } from '../../hooks/useMediaQuery';
import '../../styles/responsive.css';

// Tipos
interface Aula {
  id_aula: number;
  codigo_aula: string;
  nombre: string;
  ubicacion?: string;
  descripcion?: string;
  estado: 'activa' | 'inactiva' | 'mantenimiento' | 'reservada';
  fecha_creacion: string;
  fecha_actualizacion?: string;
}

const API_BASE = (import.meta as any).env?.VITE_API_URL || 'http://localhost:3000';

const GestionAulas = () => {
  const { isMobile, isSmallScreen } = useBreakpoints();
  
  const [aulas, setAulas] = useState<Aula[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [showModal, setShowModal] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [selectedAula, setSelectedAula] = useState<Aula | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterEstado, setFilterEstado] = useState('todos');
  const [page, setPage] = useState(1);
  const [limit] = useState(3);
  const [totalCount, setTotalCount] = useState(0);
  const [viewMode, setViewMode] = useState<'cards' | 'table'>('cards');

  const [formData, setFormData] = useState({
    nombre: '',
    ubicacion: '',
    descripcion: '',
    estado: 'activa' as 'activa' | 'inactiva' | 'mantenimiento' | 'reservada'
  });

  const [autoGeneratedCode, setAutoGeneratedCode] = useState('');

  const generateInitials = (nombre: string): string => {
    return nombre
      .split(' ')
      .map(word => word.charAt(0).toUpperCase())
      .join('')
      .substring(0, 2);
  };

  const generateAulaCode = async (nombreAula: string): Promise<string> => {
    if (!nombreAula.trim()) return '';
    
    const initials = generateInitials(nombreAula);
    
    try {
      const response = await fetch(`${API_BASE}/api/aulas?limit=1000`);
      if (!response.ok) {
        return `${initials}-AUL-001`;
      }
      
      const data = await response.json();
      const existingCodes = data.aulas?.map((a: any) => a.codigo_aula) || [];
      
      let nextNumber = 1;
      let newCode = '';
      
      do {
        newCode = `${initials}-AUL-${nextNumber.toString().padStart(3, '0')}`;
        nextNumber++;
      } while (existingCodes.includes(newCode));
      
      return newCode;
      
    } catch (error) {
      return `${initials}-AUL-001`;
    }
  };

  const fetchAulas = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const params = new URLSearchParams();
      params.set('page', String(page));
      params.set('limit', String(limit));
      if (searchTerm) params.set('search', searchTerm);
      if (filterEstado !== 'todos') params.set('estado', filterEstado);
      
      const response = await fetch(`${API_BASE}/api/aulas?${params.toString()}`);
      
      if (!response.ok) {
        throw new Error(`Error ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      setAulas(data.aulas || []);
      setTotalCount(data.total || 0);
    } catch (err) {
      console.error('Error al obtener aulas:', err);
      setError(err instanceof Error ? err.message : 'Error desconocido');
      setAulas([]);
    } finally {
      setLoading(false);
    }
  };

  const handleCreateAula = async () => {
    try {
      setLoading(true);
      
      const codigo = autoGeneratedCode || await generateAulaCode(formData.nombre);
      
      const aulaData = {
        ...formData,
        codigo_aula: codigo
      };
      
      const response = await fetch(`${API_BASE}/api/aulas`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(aulaData),
      });

      if (!response.ok) {
        throw new Error('Error al crear aula');
      }

      await fetchAulas();
      setShowCreateModal(false);
      setFormData({ nombre: '', ubicacion: '', descripcion: '', estado: 'activa' });
      setAutoGeneratedCode('');
    } catch (err) {
      console.error('Error al crear aula:', err);
      setError(err instanceof Error ? err.message : 'Error al crear aula');
    } finally {
      setLoading(false);
    }
  };

  const handleUpdateAula = async () => {
    if (!selectedAula) return;

    try {
      setLoading(true);
      const response = await fetch(`${API_BASE}/api/aulas/${selectedAula.id_aula}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        throw new Error('Error al actualizar aula');
      }

      await fetchAulas();
      setShowModal(false);
      setSelectedAula(null);
    } catch (err) {
      console.error('Error al actualizar aula:', err);
      setError(err instanceof Error ? err.message : 'Error al actualizar aula');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAulas();
  }, [page, limit, searchTerm, filterEstado]);

  const openEditModal = (aula: Aula) => {
    setSelectedAula(aula);
    setFormData({
      nombre: aula.nombre,
      ubicacion: aula.ubicacion || '',
      descripcion: aula.descripcion || '',
      estado: aula.estado
    });
    setShowModal(true);
  };

  const getEstadoColor = (estado: string) => {
    switch (estado) {
      case 'activa': return '#10b981';
      case 'inactiva': return '#6b7280';
      case 'mantenimiento': return '#f59e0b';
      case 'reservada': return '#3b82f6';
      default: return '#6b7280';
    }
  };

  const getEstadoText = (estado: string) => {
    switch (estado) {
      case 'activa': return 'Activa';
      case 'inactiva': return 'Inactiva';
      case 'mantenimiento': return 'Mantenimiento';
      case 'reservada': return 'Reservada';
      default: return estado;
    }
  };

  const aulasSorted = [...aulas].sort((a, b) => a.id_aula - b.id_aula);
  const totalPages = Math.ceil(totalCount / limit);
  const aulasActivas = aulasSorted.filter(a => a.estado === 'activa').length;

  return (
    <div style={{ 
      minHeight: '100vh', 
      background: 'linear-gradient(135deg, rgba(0,0,0,0.9) 0%, rgba(26,26,46,0.9) 100%)', 
      padding: 24, 
      color: '#fff' 
    }}>
      {/* Header */}
      <div style={{ marginBottom: 18 }}>
        <div style={{ display: 'flex', alignItems: 'center', gap: 10, marginBottom: 6 }}>
          <Building2 size={24} color={RedColorPalette.primary} />
          <h1 style={{ margin: 0, fontSize: '1.5rem', fontWeight: '700', fontFamily: '-apple-system, BlinkMacSystemFont, "SF Pro Display", sans-serif' }}>
            Gestión de Aulas
          </h1>
        </div>
        <p style={{ margin: 0, color: 'rgba(255,255,255,0.7)', fontSize: '0.85rem', fontFamily: '-apple-system, BlinkMacSystemFont, "SF Pro Text", sans-serif' }}>
          Administra las aulas y espacios físicos de la institución
        </p>
      </div>

      {/* Controles */}
      <GlassEffect variant="card" tint="neutral" intensity="light" style={{ marginBottom: 16 }}>
        <div style={{ 
          display: 'flex', 
          flexDirection: isMobile ? 'column' : 'row',
          flexWrap: 'wrap', 
          gap: '12px', 
          alignItems: isMobile ? 'stretch' : 'center', 
          justifyContent: 'space-between' 
        }}>
          <div style={{ 
            display: 'flex', 
            flexDirection: isMobile ? 'column' : 'row',
            gap: '12px', 
            alignItems: isMobile ? 'stretch' : 'center', 
            flex: 1 
          }}>
            {/* Búsqueda */}
            <div style={{ position: 'relative', minWidth: isMobile ? 'auto' : '280px', flex: isMobile ? '1' : 'initial' }}>
              <Search size={16} style={{ position: 'absolute', left: '12px', top: '50%', transform: 'translateY(-50%)', color: 'rgba(255,255,255,0.5)' }} />
              <input
                type="text"
                placeholder={isMobile ? "Buscar..." : "Buscar por código, nombre o ubicación..."}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                style={{
                  width: '100%',
                  padding: '10px 10px 10px 38px',
                  background: 'rgba(255,255,255,0.1)',
                  border: '1px solid rgba(255,255,255,0.2)',
                  borderRadius: '10px',
                  color: '#fff',
                  fontSize: '0.8rem'
                }}
              />
            </div>

            {/* Filtros */}
            <div style={{ minWidth: isMobile ? 'auto' : 200, flex: isMobile ? '1' : 'initial' }}>
              <StyledSelect
                name="filterEstado"
                value={filterEstado}
                onChange={(e) => setFilterEstado(e.target.value)}
                options={[
                  { value: 'todos', label: 'Todos los estados' },
                  { value: 'activa', label: 'Activa' },
                  { value: 'inactiva', label: 'Inactiva' },
                  { value: 'mantenimiento', label: 'Mantenimiento' },
                  { value: 'reservada', label: 'Reservada' }
                ]}
              />
            </div>

            {/* Toggle Vista */}
            <div style={{ 
              display: 'flex', 
              gap: '6px', 
              background: 'rgba(255,255,255,0.05)', 
              borderRadius: '10px', 
              padding: '3px',
              width: isSmallScreen ? '100%' : 'auto'
            }}>
              <button
                onClick={() => setViewMode('cards')}
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '5px',
                  padding: isMobile ? '7px 10px' : '7px 12px',
                  background: viewMode === 'cards' ? mapToRedScheme('rgba(59, 130, 246, 0.2)') : 'transparent',
                  border: viewMode === 'cards' ? `1px solid ${RedColorPalette.primary}` : '1px solid transparent',
                  borderRadius: '7px',
                  color: viewMode === 'cards' ? RedColorPalette.primary : 'rgba(255,255,255,0.6)',
                  cursor: 'pointer',
                  fontSize: isMobile ? '0.75rem' : '0.75rem',
                  fontWeight: 600,
                  transition: 'all 0.2s ease',
                  flex: isSmallScreen ? 1 : 'initial'
                }}
              >
                <Grid size={16} /> {!isMobile && 'Tarjetas'}
              </button>
              <button
                onClick={() => setViewMode('table')}
                style={{
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '6px',
                  padding: isMobile ? '7px 10px' : '8px 14px',
                  background: viewMode === 'table' ? mapToRedScheme('rgba(59, 130, 246, 0.2)') : 'transparent',
                  border: viewMode === 'table' ? `1px solid ${RedColorPalette.primary}` : '1px solid transparent',
                  borderRadius: '8px',
                  color: viewMode === 'table' ? RedColorPalette.primary : 'rgba(255,255,255,0.6)',
                  cursor: 'pointer',
                  fontSize: isMobile ? '0.75rem' : '0.9rem',
                  fontWeight: 600,
                  transition: 'all 0.2s ease',
                  flex: isSmallScreen ? 1 : 'initial'
                }}
              >
                <List size={16} /> {!isMobile && 'Tabla'}
              </button>
            </div>
          </div>

          {/* Botón Crear */}
          <button
            onClick={() => {
              setShowCreateModal(true);
              setAutoGeneratedCode('');
            }}
            style={{
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '8px',
              padding: isMobile ? '10px 16px' : '12px 24px',
              background: `linear-gradient(135deg, ${RedColorPalette.primary}, ${RedColorPalette.primaryDark})`,
              border: 'none',
              borderRadius: '10px',
              color: '#fff',
              fontFamily: '-apple-system, BlinkMacSystemFont, "SF Pro Text", sans-serif',
              fontSize: '0.8rem',
              fontWeight: '600',
              cursor: 'pointer',
              boxShadow: '0 4px 12px rgba(239, 68, 68, 0.3)',
              width: isSmallScreen ? '100%' : 'auto'
            }}
          >
            <Plus size={16} />
            Nueva Aula
          </button>
        </div>
      </GlassEffect>

      {/* Estadísticas */}
      <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(180px, 1fr))', gap: 12, marginBottom: 16 }}>
        <GlassEffect variant="card" tint="red" intensity="light" style={{ textAlign: 'center' }}>
          <div style={{ fontSize: '1.6rem', fontWeight: '700', color: RedColorPalette.primary, marginBottom: 3, fontFamily: '-apple-system, BlinkMacSystemFont, "SF Pro Display", sans-serif' }}>
            {totalCount}
          </div>
          <div style={{ color: 'rgba(255,255,255,0.8)', fontSize: '0.75rem' }}>
            Total Aulas
          </div>
        </GlassEffect>
        
        <GlassEffect variant="card" tint="success" intensity="light" style={{ textAlign: 'center' }}>
          <div style={{ fontSize: '1.6rem', fontWeight: '700', color: mapToRedScheme('#10b981'), marginBottom: 3, fontFamily: '-apple-system, BlinkMacSystemFont, "SF Pro Display", sans-serif' }}>
            {aulasActivas}
          </div>
          <div style={{ color: 'rgba(255,255,255,0.8)', fontSize: '0.75rem' }}>
            Aulas Activas
          </div>
        </GlassEffect>
      </div>

      {/* Error */}
      {error && (
        <div style={{ 
          background: 'rgba(239, 68, 68, 0.1)', 
          border: '1px solid rgba(239, 68, 68, 0.3)', 
          borderRadius: 12, 
          padding: 16, 
          marginBottom: 24, 
          color: '#ef4444' 
        }}>
          {error}
        </div>
      )}

      {/* Vista Cards */}
      {viewMode === 'cards' && (
        <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(280px, 1fr))', gap: '16px', marginBottom: '18px' }}>
          {loading ? (
            <div style={{ gridColumn: '1 / -1', padding: '40px 20px', textAlign: 'center', color: 'rgba(255,255,255,0.6)', fontSize: '0.85rem' }}>
              Cargando aulas...
            </div>
          ) : aulasSorted.length === 0 ? (
            <div style={{ gridColumn: '1 / -1', padding: '40px 20px', textAlign: 'center', color: 'rgba(255,255,255,0.6)', fontSize: '0.85rem' }}>
              No hay aulas registradas
            </div>
          ) : (
            aulasSorted.map((aula) => (
              <GlassEffect
                key={aula.id_aula}
                variant="card"
                tint="red"
                intensity="light"
                hover
                animated
                style={{
                  padding: '14px',
                }}
              >
                <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'start', marginBottom: '12px' }}>
                  <div style={{ display: 'flex', alignItems: 'center', gap: 10 }}>
                    <div style={{ 
                      width: 40, 
                      height: 40, 
                      borderRadius: '50%', 
                      background: 'rgba(239, 68, 68, 0.15)', 
                      display: 'flex', 
                      alignItems: 'center', 
                      justifyContent: 'center' 
                    }}>
                      <Building2 size={20} color={RedColorPalette.primary} />
                    </div>
                    <div>
                      <h3 style={{ color: 'rgba(255,255,255,0.95)', fontSize: '0.9rem', fontWeight: 700, margin: '0 0 3px 0', fontFamily: '-apple-system, BlinkMacSystemFont, "SF Pro Display", sans-serif' }}>
                        {aula.nombre}
                      </h3>
                      <span style={{
                        display: 'inline-flex',
                        padding: '2px 8px',
                        borderRadius: '9999px',
                        fontSize: '0.65rem',
                        fontWeight: '600',
                        textTransform: 'uppercase',
                        background: `${getEstadoColor(aula.estado)}20`,
                        border: `1px solid ${getEstadoColor(aula.estado)}40`,
                        color: getEstadoColor(aula.estado)
                      }}>
                        {getEstadoText(aula.estado)}
                      </span>
                    </div>
                  </div>
                </div>

                <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '10px', marginBottom: '12px', paddingTop: '10px', borderTop: '1px solid rgba(255,255,255,0.1)' }}>
                  <div>
                    <div style={{ color: 'rgba(255,255,255,0.5)', fontSize: '0.65rem', marginBottom: '3px' }}>
                      Código
                    </div>
                    <div style={{ color: '#fff', fontSize: '0.75rem', fontWeight: 600, fontFamily: 'monospace' }}>
                      {aula.codigo_aula}
                    </div>
                  </div>
                  <div>
                    <div style={{ color: 'rgba(255,255,255,0.5)', fontSize: '0.65rem', marginBottom: '3px' }}>
                      <Calendar size={10} style={{ display: 'inline', marginRight: '3px' }} />
                      Fecha Creación
                    </div>
                    <div style={{ color: '#fff', fontSize: '0.7rem' }}>
                      {new Date(aula.fecha_creacion).toLocaleDateString('es-ES')}
                    </div>
                  </div>
                  <div style={{ gridColumn: '1 / -1' }}>
                    <div style={{ color: 'rgba(255,255,255,0.5)', fontSize: '0.65rem', marginBottom: '3px' }}>
                      <MapPin size={10} style={{ display: 'inline', marginRight: '3px' }} />
                      Ubicación
                    </div>
                    <div style={{ color: '#fff', fontSize: '0.7rem' }}>
                      {aula.ubicacion || 'No especificada'}
                    </div>
                  </div>
                  {aula.descripcion && (
                    <div style={{ gridColumn: '1 / -1' }}>
                      <div style={{ color: 'rgba(255,255,255,0.5)', fontSize: '0.65rem', marginBottom: '3px' }}>
                        Descripción
                      </div>
                      <div style={{ color: '#fff', fontSize: '0.7rem' }}>
                        {aula.descripcion}
                      </div>
                    </div>
                  )}
                </div>

                <button
                  onClick={() => openEditModal(aula)}
                  style={{
                    width: '100%',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    gap: '6px',
                    padding: '10px',
                    background: 'rgba(239, 68, 68, 0.1)',
                    border: `1px solid ${RedColorPalette.primary}`,
                    borderRadius: '10px',
                    color: RedColorPalette.primary,
                    fontSize: '0.85rem',
                    fontWeight: 600,
                    cursor: 'pointer',
                    transition: 'all 0.2s ease',
                  }}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.background = 'rgba(239, 68, 68, 0.2)';
                    e.currentTarget.style.transform = 'scale(1.05) translateY(-1px)';
                    e.currentTarget.style.boxShadow = `0 4px 12px ${RedColorPalette.primary}40`;
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.background = 'rgba(239, 68, 68, 0.1)';
                    e.currentTarget.style.transform = 'scale(1) translateY(0)';
                    e.currentTarget.style.boxShadow = 'none';
                  }}
                >
                  <Edit size={14} /> Editar
                </button>
              </GlassEffect>
            ))
          )}
        </div>
      )}

      {/* Vista Tabla */}
      {viewMode === 'table' && (
        <div style={{ 
          background: 'rgba(255,255,255,0.05)', 
          borderRadius: 16, 
          overflow: 'hidden',
          border: '1px solid rgba(255,255,255,0.1)',
          marginBottom: '24px'
        }}>
          {/* Indicador de scroll en móvil */}
          {isSmallScreen && (
            <div style={{
              background: 'rgba(239, 68, 68, 0.1)',
              border: '1px solid rgba(239, 68, 68, 0.3)',
              borderRadius: '8px',
              padding: '8px 12px',
              margin: '12px',
              color: '#ef4444',
              fontSize: '0.75rem',
              textAlign: 'center',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              gap: '6px'
            }}>
              <span>👉</span>
              <span>Desliza horizontalmente para ver toda la tabla</span>
              <span>👈</span>
            </div>
          )}
          
          <div className="responsive-table-container" style={{ overflowX: 'auto' }}>
            <table style={{ width: '100%', borderCollapse: 'collapse' }}>
              <thead>
                <tr style={{ 
                  background: 'rgba(248, 113, 113, 0.15)',
                  borderBottom: '1px solid rgba(248, 113, 113, 0.3)'
                }}>
                  <th style={{ padding: '10px 12px', textAlign: 'left', color: '#fff', fontWeight: '600', fontSize: '0.75rem', textTransform: 'uppercase' }}>
                    Código
                  </th>
                  <th style={{ padding: '10px 12px', textAlign: 'left', color: '#fff', fontWeight: '600', fontSize: '0.75rem', textTransform: 'uppercase' }}>
                    Nombre
                  </th>
                  <th style={{ padding: '10px 12px', textAlign: 'left', color: '#fff', fontWeight: '600', fontSize: '0.75rem', textTransform: 'uppercase' }}>
                    Ubicación
                  </th>
                  <th style={{ padding: '10px 12px', textAlign: 'center', color: '#fff', fontWeight: '600', fontSize: '0.75rem', textTransform: 'uppercase' }}>
                    Estado
                  </th>
                  <th style={{ padding: '10px 12px', textAlign: 'left', color: '#fff', fontWeight: '600', fontSize: '0.75rem', textTransform: 'uppercase' }}>
                    Fecha Creación
                  </th>
                  <th style={{ padding: '10px 12px', textAlign: 'center', color: '#fff', fontWeight: '600', fontSize: '0.75rem', textTransform: 'uppercase' }}>
                    Acciones
                  </th>
                </tr>
              </thead>
              <tbody>
                {loading ? (
                  <tr>
                    <td colSpan={6} style={{ padding: '40px', textAlign: 'center', color: 'rgba(255,255,255,0.6)' }}>
                      Cargando aulas...
                    </td>
                  </tr>
                ) : aulasSorted.length === 0 ? (
                  <tr>
                    <td colSpan={6} style={{ padding: '40px', textAlign: 'center', color: 'rgba(255,255,255,0.6)' }}>
                      No hay aulas registradas
                    </td>
                  </tr>
                ) : (
                  aulasSorted.map((aula, index) => (
                    <tr 
                      key={aula.id_aula}
                      style={{ 
                        borderBottom: '1px solid rgba(255,255,255,0.05)',
                        background: index % 2 === 0 ? 'rgba(255,255,255,0.02)' : 'transparent',
                        transition: 'all 0.2s ease'
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.background = 'rgba(248, 113, 113, 0.08)';
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.background = index % 2 === 0 ? 'rgba(255,255,255,0.02)' : 'transparent';
                      }}
                    >
                      <td style={{ padding: '12px' }}>
                        <div style={{ 
                          fontWeight: '600',
                          color: '#f87171',
                          fontSize: '0.8rem',
                          fontFamily: 'monospace'
                        }}>
                          {aula.codigo_aula}
                        </div>
                      </td>
                      <td style={{ padding: '12px' }}>
                        <div style={{ 
                          fontWeight: '600',
                          color: '#fff',
                          fontSize: '0.85rem',
                          marginBottom: '2px'
                        }}>
                          {aula.nombre}
                        </div>
                        {aula.descripcion && (
                          <div style={{ 
                            fontSize: '0.7rem',
                            color: 'rgba(255,255,255,0.5)',
                            maxWidth: '200px',
                            overflow: 'hidden',
                            textOverflow: 'ellipsis',
                            whiteSpace: 'nowrap'
                          }}>
                            {aula.descripcion}
                          </div>
                        )}
                      </td>
                      <td style={{ padding: '12px' }}>
                        <div style={{ 
                          display: 'flex',
                          alignItems: 'center',
                          gap: '6px',
                          color: 'rgba(255,255,255,0.8)',
                          fontSize: '0.8rem'
                        }}>
                          <MapPin size={12} />
                          {aula.ubicacion || 'No especificada'}
                        </div>
                      </td>
                      <td style={{ padding: '12px', textAlign: 'center' }}>
                        <span style={{
                          padding: '4px 10px',
                          borderRadius: '8px',
                          fontSize: '0.7rem',
                          fontWeight: '700',
                          textTransform: 'uppercase',
                          background: `${getEstadoColor(aula.estado)}20`,
                          color: getEstadoColor(aula.estado),
                          border: `1px solid ${getEstadoColor(aula.estado)}40`
                        }}>
                          {getEstadoText(aula.estado)}
                        </span>
                      </td>
                      <td style={{ padding: '12px' }}>
                        <div style={{ 
                          display: 'flex',
                          alignItems: 'center',
                          gap: '6px',
                          color: 'rgba(255,255,255,0.8)',
                          fontSize: '0.75rem'
                        }}>
                          <Calendar size={12} />
                          {new Date(aula.fecha_creacion).toLocaleDateString('es-ES')}
                        </div>
                      </td>
                      <td style={{ padding: '12px', textAlign: 'center' }}>
                        <button
                          onClick={() => openEditModal(aula)}
                          style={{
                            padding: '6px 10px',
                            background: 'rgba(245, 158, 11, 0.2)',
                            border: '1px solid rgba(245, 158, 11, 0.3)',
                            color: '#fbbf24',
                            borderRadius: '6px',
                            cursor: 'pointer',
                            display: 'inline-flex',
                            alignItems: 'center',
                            gap: '4px',
                            fontSize: '0.75rem',
                            fontWeight: '600',
                            transition: 'all 0.2s ease'
                          }}
                          onMouseEnter={(e) => {
                            e.currentTarget.style.background = 'rgba(245, 158, 11, 0.3)';
                          }}
                          onMouseLeave={(e) => {
                            e.currentTarget.style.background = 'rgba(245, 158, 11, 0.2)';
                          }}
                        >
                          <Edit size={12} />
                          Editar
                        </button>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Paginación */}
      {!loading && aulasSorted.length > 0 && totalPages > 0 && (
        <div style={{
          display: 'flex',
          flexDirection: isMobile ? 'column' : 'row',
          justifyContent: 'space-between',
          alignItems: isMobile ? 'stretch' : 'center',
          gap: isMobile ? '12px' : '0',
          padding: isMobile ? '16px' : '20px 24px',
          marginTop: isMobile ? '16px' : '20px',
          marginBottom: '24px',
          background: 'linear-gradient(135deg, rgba(0,0,0,0.9) 0%, rgba(26,26,26,0.9) 100%)',
          border: '1px solid rgba(239, 68, 68, 0.2)',
          borderRadius: '16px',
        }}>
          <div style={{ 
            color: 'rgba(255,255,255,0.7)', 
            fontSize: isMobile ? '0.8rem' : '0.9rem',
            textAlign: isMobile ? 'center' : 'left'
          }}>
            Página {page} de {totalPages} • Total: {totalCount} aulas
          </div>
          <div style={{ 
            display: 'flex', 
            gap: '8px', 
            flexWrap: 'wrap',
            justifyContent: isMobile ? 'center' : 'flex-start'
          }}>
            <button
              onClick={() => setPage(p => Math.max(1, p - 1))}
              disabled={page === 1}
              style={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                gap: isMobile ? '4px' : '6px',
                padding: isMobile ? '8px 12px' : '8px 16px',
                background: page === 1 ? 'rgba(255,255,255,0.05)' : 'rgba(255,255,255,0.1)',
                border: '1px solid rgba(255,255,255,0.2)',
                borderRadius: '10px',
                color: page === 1 ? 'rgba(255,255,255,0.3)' : '#fff',
                fontSize: isMobile ? '0.8rem' : '0.9rem',
                fontWeight: 600,
                cursor: page === 1 ? 'not-allowed' : 'pointer',
                transition: 'all 0.2s ease',
                flex: isMobile ? '1' : 'initial'
              }}
            >
              <ChevronLeft size={isMobile ? 14 : 16} /> 
              {!isMobile && 'Anterior'}
            </button>
            {Array.from({ length: totalPages }, (_, i) => i + 1).map(pageNum => (
              <button
                key={pageNum}
                onClick={() => setPage(pageNum)}
                style={{
                  padding: isMobile ? '8px 10px' : '8px 14px',
                  background: page === pageNum ? `linear-gradient(135deg, ${RedColorPalette.primary}, ${RedColorPalette.primaryDark})` : 'rgba(255,255,255,0.08)',
                  border: page === pageNum ? `1px solid ${RedColorPalette.primary}` : '1px solid rgba(255,255,255,0.15)',
                  borderRadius: '10px',
                  color: '#fff',
                  fontSize: isMobile ? '0.8rem' : '0.9rem',
                  fontWeight: 600,
                  cursor: 'pointer',
                  transition: 'all 0.2s ease',
                  minWidth: isMobile ? '36px' : '40px',
                }}
              >
                {pageNum}
              </button>
            ))}
            <button
              onClick={() => setPage(p => Math.min(totalPages, p + 1))}
              disabled={page === totalPages}
              style={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                gap: isMobile ? '4px' : '6px',
                padding: isMobile ? '8px 12px' : '8px 16px',
                background: page === totalPages ? 'rgba(255,255,255,0.05)' : 'rgba(255,255,255,0.1)',
                border: '1px solid rgba(255,255,255,0.2)',
                borderRadius: '10px',
                color: page === totalPages ? 'rgba(255,255,255,0.3)' : '#fff',
                fontSize: isMobile ? '0.8rem' : '0.9rem',
                fontWeight: 600,
                cursor: page === totalPages ? 'not-allowed' : 'pointer',
                transition: 'all 0.2s ease',
                flex: isMobile ? '1' : 'initial'
              }}
            >
              {!isMobile && 'Siguiente'} 
              <ChevronRight size={isMobile ? 14 : 16} />
            </button>
          </div>
        </div>
      )}

      {/* Modal Crear Aula */}
      {showCreateModal && (
        <div 
          data-modal-overlay="true"
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            display: 'flex',
            alignItems: isMobile ? 'flex-end' : 'center',
            justifyContent: 'center',
            zIndex: 9999,
            padding: isMobile ? '0' : '20px',
            }}
        >
          <GlassEffect
            variant="card"
            tint="neutral"
            intensity="medium"
            className="responsive-modal"
            style={{
              width: isMobile ? '100vw' : '100%',
              maxWidth: isMobile ? '100vw' : '600px',
              padding: isMobile ? '16px' : '18px 28px 22px 28px',
              color: '#fff',
              margin: '0 auto',
              maxHeight: isMobile ? '90vh' : '85vh',
              overflowY: 'auto',
              borderRadius: isMobile ? '20px 20px 0 0' : '12px',
            }}
          >
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '18px',
              paddingBottom: '14px',
              borderBottom: '1px solid rgba(255, 255, 255, 0.08)',
            }}>
              <h2 style={{
                margin: 0,
                fontSize: '1.25rem',
                fontWeight: '600',
                letterSpacing: '-0.02em',
                color: '#fff',
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                fontFamily: '-apple-system, BlinkMacSystemFont, "SF Pro Display", sans-serif'
              }}>
                <Building2 size={20} color={RedColorPalette.primary} />
                Nueva Aula
              </h2>
              <button
                onClick={() => {
                  setShowCreateModal(false);
                  setFormData({ nombre: '', ubicacion: '', descripcion: '', estado: 'activa' });
                }}
                style={{
                  background: 'rgba(255,255,255,0.05)',
                  border: '1px solid rgba(255,255,255,0.1)',
                  borderRadius: '8px',
                  padding: '6px',
                  color: '#fff',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  transition: 'all 0.2s ease',
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.background = 'rgba(239, 68, 68, 0.2)';
                  e.currentTarget.style.borderColor = 'rgba(239, 68, 68, 0.4)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = 'rgba(255,255,255,0.05)';
                  e.currentTarget.style.borderColor = 'rgba(255,255,255,0.1)';
                }}
              >
                <X size={18} />
              </button>
            </div>

            <div style={{ display: 'flex', flexDirection: 'column', gap: isMobile ? '16px' : '20px' }}>
              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: isMobile ? '1fr' : '1fr 1fr', 
                gap: isMobile ? '16px' : '20px' 
              }}>
                <div>
                  <label style={{
                    display: 'block',
                    marginBottom: '8px',
                    fontWeight: '500',
                    color: 'rgba(255,255,255,0.9)',
                    fontSize: '0.875rem'
                  }}>
                    Código
                  </label>
                  <input
                    type="text"
                    value={autoGeneratedCode || 'Se genera automáticamente'}
                    readOnly
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '1px solid rgba(255,255,255,0.15)',
                      borderRadius: '8px',
                      background: 'rgba(255,255,255,0.05)',
                      color: 'rgba(255,255,255,0.5)',
                      fontSize: '0.95rem',
                      cursor: 'not-allowed'
                    }}
                  />
                  <div style={{
                    fontSize: '0.75rem',
                    color: 'rgba(255,255,255,0.5)',
                    marginTop: '4px'
                  }}>
                    Se genera automáticamente
                  </div>
                </div>
                
                <div>
                  <label style={{
                    display: 'block',
                    marginBottom: '8px',
                    fontWeight: '500',
                    color: 'rgba(255,255,255,0.9)',
                    fontSize: '0.875rem'
                  }}>
                    Nombre *
                  </label>
                  <input
                    type="text"
                    value={formData.nombre}
                    onChange={async (e) => {
                      const nombre = e.target.value;
                      setFormData({ ...formData, nombre });
                      
                      if (nombre.trim().length > 2) {
                        try {
                          const codigo = await generateAulaCode(nombre);
                          setAutoGeneratedCode(codigo);
                        } catch (error) {
                          const initials = generateInitials(nombre);
                          setAutoGeneratedCode(`${initials}-AUL-001`);
                        }
                      } else {
                        setAutoGeneratedCode('');
                      }
                    }}
                    placeholder="Ej: Aula de Cosmetología"
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '1px solid rgba(255,255,255,0.15)',
                      borderRadius: '8px',
                      background: 'rgba(255,255,255,0.08)',
                      color: '#fff',
                      fontSize: '0.95rem'
                    }}
                    required
                  />
                </div>
              </div>

              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '8px',
                  fontWeight: '500',
                  color: 'rgba(255,255,255,0.9)',
                  fontSize: '0.875rem'
                }}>
                  Descripción
                </label>
                <textarea
                  value={formData.descripcion}
                  onChange={(e) => setFormData({ ...formData, descripcion: e.target.value })}
                  placeholder="Descripción del aula..."
                  rows={3}
                  style={{
                    width: '100%',
                    padding: '12px',
                    border: '1px solid rgba(255,255,255,0.15)',
                    borderRadius: '8px',
                    background: 'rgba(255,255,255,0.08)',
                    color: '#fff',
                    fontSize: '0.95rem',
                    resize: 'vertical',
                    fontFamily: 'inherit'
                  }}
                />
              </div>

              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px' }}>
                <div>
                  <label style={{
                    display: 'block',
                    marginBottom: '8px',
                    fontWeight: '500',
                    color: 'rgba(255,255,255,0.9)',
                    fontSize: '0.875rem'
                  }}>
                    Ubicación
                  </label>
                  <input
                    type="text"
                    value={formData.ubicacion}
                    onChange={(e) => setFormData({ ...formData, ubicacion: e.target.value })}
                    placeholder="Ej: Edificio A - Piso 2"
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '1px solid rgba(255,255,255,0.15)',
                      borderRadius: '8px',
                      background: 'rgba(255,255,255,0.08)',
                      color: '#fff',
                      fontSize: '0.95rem'
                    }}
                  />
                </div>

                <div>
                  <label style={{
                    display: 'block',
                    marginBottom: '8px',
                    fontWeight: '500',
                    color: 'rgba(255,255,255,0.9)',
                    fontSize: '0.875rem'
                  }}>
                    Estado
                  </label>
                  <StyledSelect
                    name="estado"
                    value={formData.estado}
                    onChange={(e) => setFormData({ ...formData, estado: e.target.value as any })}
                    options={[
                      { value: 'activa', label: 'Activa' },
                      { value: 'inactiva', label: 'Inactiva' },
                      { value: 'mantenimiento', label: 'Mantenimiento' },
                      { value: 'reservada', label: 'Reservada' }
                    ]}
                    style={{ width: '100%' }}
                  />
                </div>
              </div>
            </div>

            <div style={{
              display: 'flex',
              flexDirection: isMobile ? 'column-reverse' : 'row',
              gap: '12px',
              marginTop: isMobile ? '24px' : '32px',
              justifyContent: 'flex-end'
            }}>
              <button
                onClick={() => {
                  setShowCreateModal(false);
                  setFormData({ nombre: '', ubicacion: '', descripcion: '', estado: 'activa' });
                }}
                style={{
                  padding: '12px 24px',
                  background: 'rgba(255,255,255,0.05)',
                  color: 'rgba(255,255,255,0.7)',
                  border: '1px solid rgba(255,255,255,0.15)',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '0.95rem',
                  fontWeight: '500',
                  width: isMobile ? '100%' : 'auto'
                }}
              >
                Cancelar
              </button>
              <button
                onClick={handleCreateAula}
                disabled={!formData.nombre.trim() || loading}
                style={{
                  padding: '12px 24px',
                  background: !formData.nombre.trim() || loading ? 'rgba(255,255,255,0.05)' : RedColorPalette.primary,
                  color: !formData.nombre.trim() || loading ? 'rgba(255,255,255,0.3)' : 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: !formData.nombre.trim() || loading ? 'not-allowed' : 'pointer',
                  fontSize: '0.95rem',
                  fontWeight: '600',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '8px',
                  width: isMobile ? '100%' : 'auto'
                }}
              >
                {loading ? (
                  <>
                    <div style={{
                      width: '16px',
                      height: '16px',
                      border: '2px solid transparent',
                      borderTop: '2px solid currentColor',
                      borderRadius: '50%',
                      animation: 'spin 1s linear infinite'
                    }} />
                    Creando...
                  </>
                ) : (
                  <>
                    <Building2 size={16} />
                    Crear Aula
                  </>
                )}
              </button>
            </div>
          </GlassEffect>
        </div>
      )}

      {/* Modal Editar Aula */}
      {showModal && selectedAula && (
        <div 
          data-modal-overlay="true"
          style={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            display: 'flex',
            alignItems: isMobile ? 'flex-end' : 'center',
            justifyContent: 'center',
            zIndex: 9999,
            padding: isMobile ? '0' : '20px',
            }}
        >
          <GlassEffect
            variant="card"
            tint="neutral"
            intensity="medium"
            className="responsive-modal"
            style={{
              width: isMobile ? '100vw' : '100%',
              maxWidth: isMobile ? '100vw' : '600px',
              padding: isMobile ? '16px' : '18px 28px 22px 28px',
              color: '#fff',
              margin: '0 auto',
              maxHeight: isMobile ? '90vh' : '85vh',
              overflowY: 'auto',
              borderRadius: isMobile ? '20px 20px 0 0' : '12px',
            }}
          >
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '18px',
              paddingBottom: '14px',
              borderBottom: '1px solid rgba(255, 255, 255, 0.08)',
            }}>
              <h2 style={{
                margin: 0,
                fontSize: '1.25rem',
                fontWeight: '600',
                letterSpacing: '-0.02em',
                color: '#fff',
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                fontFamily: '-apple-system, BlinkMacSystemFont, "SF Pro Display", sans-serif'
              }}>
                <Edit size={20} color={RedColorPalette.primary} />
                Editar Aula
              </h2>
              <button
                onClick={() => {
                  setShowModal(false);
                  setSelectedAula(null);
                }}
                style={{
                  background: 'rgba(255,255,255,0.05)',
                  border: '1px solid rgba(255,255,255,0.1)',
                  borderRadius: '8px',
                  padding: '6px',
                  color: '#fff',
                  cursor: 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  transition: 'all 0.2s ease',
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.background = 'rgba(239, 68, 68, 0.2)';
                  e.currentTarget.style.borderColor = 'rgba(239, 68, 68, 0.4)';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = 'rgba(255,255,255,0.05)';
                  e.currentTarget.style.borderColor = 'rgba(255,255,255,0.1)';
                }}
              >
                <X size={18} />
              </button>
            </div>

            <div style={{
              background: 'rgba(239, 68, 68, 0.1)',
              padding: '16px',
              borderRadius: '8px',
              marginBottom: '20px',
              border: '1px solid rgba(239, 68, 68, 0.3)'
            }}>
              <div style={{
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                marginBottom: '8px'
              }}>
                <Building2 size={16} color={RedColorPalette.primary} />
                <span style={{
                  fontWeight: '600',
                  color: '#fff'
                }}>
                  {selectedAula.codigo_aula}
                </span>
              </div>
              <div style={{
                fontSize: '0.85rem',
                color: 'rgba(255,255,255,0.7)'
              }}>
                Creada el {new Date(selectedAula.fecha_creacion).toLocaleDateString('es-ES')}
              </div>
            </div>

            <div style={{ display: 'flex', flexDirection: 'column', gap: isMobile ? '16px' : '20px' }}>
              <div style={{ 
                display: 'grid', 
                gridTemplateColumns: isMobile ? '1fr' : '1fr 1fr', 
                gap: isMobile ? '16px' : '20px' 
              }}>
                <div>
                  <label style={{
                    display: 'block',
                    marginBottom: '8px',
                    fontWeight: '500',
                    fontSize: '0.875rem',
                    color: 'rgba(255,255,255,0.9)'
                  }}>
                    Nombre del Aula *
                  </label>
                  <input
                    type="text"
                    value={formData.nombre}
                    onChange={(e) => setFormData({ ...formData, nombre: e.target.value })}
                    placeholder="Ej: Aula de Teoría 1"
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      border: '1px solid rgba(255,255,255,0.15)',
                      borderRadius: '8px',
                      background: 'rgba(255,255,255,0.08)',
                      color: '#fff',
                      fontSize: '0.9rem',
                      transition: 'all 0.2s ease',
                    }}
                    required
                  />
                </div>

                <div>
                  <label style={{
                    display: 'block',
                    marginBottom: '8px',
                    fontWeight: '500',
                    fontSize: '0.875rem',
                    color: 'rgba(255,255,255,0.9)'
                  }}>
                    Estado
                  </label>
                  <select
                    value={formData.estado}
                    onChange={(e) => setFormData({ ...formData, estado: e.target.value as any })}
                    style={{
                      width: '100%',
                      padding: '10px 12px',
                      border: '1px solid rgba(255,255,255,0.15)',
                      borderRadius: '8px',
                      background: 'rgba(255,255,255,0.08)',
                      color: '#fff',
                      fontSize: '0.9rem',
                      cursor: 'pointer',
                    }}
                  >
                    <option value="activa" style={{ background: '#1a1a1a' }}>Activa</option>
                    <option value="inactiva" style={{ background: '#1a1a1a' }}>Inactiva</option>
                    <option value="mantenimiento" style={{ background: '#1a1a1a' }}>Mantenimiento</option>
                    <option value="reservada" style={{ background: '#1a1a1a' }}>Reservada</option>
                  </select>
                </div>
              </div>

              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '8px',
                  fontWeight: '500',
                  fontSize: '0.875rem',
                  color: 'rgba(255,255,255,0.9)'
                }}>
                  Descripción
                </label>
                <textarea
                  value={formData.descripcion}
                  onChange={(e) => setFormData({ ...formData, descripcion: e.target.value })}
                  placeholder="Descripción del aula..."
                  rows={3}
                  style={{
                    width: '100%',
                    padding: '10px 12px',
                    border: '1px solid rgba(255,255,255,0.15)',
                    borderRadius: '8px',
                    background: 'rgba(255,255,255,0.08)',
                    color: '#fff',
                    fontSize: '0.9rem',
                    resize: 'vertical',
                    fontFamily: 'inherit',
                    transition: 'all 0.2s ease',
                  }}
                />
              </div>

              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '8px',
                  fontWeight: '500',
                  fontSize: '0.875rem',
                  color: 'rgba(255,255,255,0.9)'
                }}>
                  Ubicación
                </label>
                <input
                  type="text"
                  value={formData.ubicacion}
                  onChange={(e) => setFormData({ ...formData, ubicacion: e.target.value })}
                  placeholder="Ej: Edificio A - Piso 2"
                  style={{
                    width: '100%',
                    padding: '10px 12px',
                    border: '1px solid rgba(255,255,255,0.15)',
                    borderRadius: '8px',
                    background: 'rgba(255,255,255,0.08)',
                    color: '#fff',
                    fontSize: '0.9rem',
                    transition: 'all 0.2s ease',
                  }}
                />
              </div>
            </div>

            <div style={{
              display: 'flex',
              flexDirection: isMobile ? 'column-reverse' : 'row',
              gap: '12px',
              marginTop: isMobile ? '24px' : '32px',
              justifyContent: 'flex-end'
            }}>
              <button
                onClick={() => {
                  setShowModal(false);
                  setSelectedAula(null);
                }}
                style={{
                  padding: '12px 24px',
                  background: 'rgba(255,255,255,0.05)',
                  color: 'rgba(255,255,255,0.7)',
                  border: '1px solid rgba(255,255,255,0.15)',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '0.95rem',
                  fontWeight: '500',
                  width: isMobile ? '100%' : 'auto'
                }}
              >
                Cancelar
              </button>
              <button
                onClick={handleUpdateAula}
                disabled={!formData.nombre.trim() || loading}
                style={{
                  padding: '12px 24px',
                  background: !formData.nombre.trim() || loading ? 'rgba(255,255,255,0.05)' : RedColorPalette.primary,
                  color: !formData.nombre.trim() || loading ? 'rgba(255,255,255,0.3)' : 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: !formData.nombre.trim() || loading ? 'not-allowed' : 'pointer',
                  fontSize: '0.95rem',
                  fontWeight: '600',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '8px',
                  width: isMobile ? '100%' : 'auto'
                }}
              >
                {loading ? (
                  <>
                    <div style={{
                      width: '16px',
                      height: '16px',
                      border: '2px solid transparent',
                      borderTop: '2px solid currentColor',
                      borderRadius: '50%',
                      animation: 'spin 1s linear infinite'
                    }} />
                    Guardando...
                  </>
                ) : (
                  <>
                    <Edit size={16} />
                    Guardar Cambios
                  </>
                )}
              </button>
            </div>
          </GlassEffect>
        </div>
      )}

      <style>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  );
};

export default GestionAulas;



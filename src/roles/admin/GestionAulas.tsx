import { useState, useEffect } from 'react';
import { 
  Search, Building2, MapPin, Calendar, Plus, Edit, X, AlertCircle
} from 'lucide-react';
import { StyledSelect } from '../../components/StyledSelect';

// Tipos
interface Aula {
  id_aula: number;
  codigo_aula: string;
  nombre: string;
  ubicacion?: string;
  descripcion?: string;
  estado: 'activa' | 'inactiva' | 'mantenimiento' | 'reservada';
  fecha_creacion: string;
  fecha_actualizacion?: string;
}

const API_BASE = (import.meta as any).env?.VITE_API_URL || 'http://localhost:3000';

const GestionAulas = () => {
  const [aulas, setAulas] = useState<Aula[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [showModal, setShowModal] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [selectedAula, setSelectedAula] = useState<Aula | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterEstado, setFilterEstado] = useState('todos');
  const [page, setPage] = useState(1);
  const [limit, setLimit] = useState(10);
  const [totalCount, setTotalCount] = useState(0);

  // Estados para crear/editar aula
  const [formData, setFormData] = useState({
    nombre: '',
    ubicacion: '',
    descripcion: '',
    estado: 'activa' as 'activa' | 'inactiva' | 'mantenimiento' | 'reservada'
  });

  // Estado para código generado automáticamente (igual que en cursos)
  const [autoGeneratedCode, setAutoGeneratedCode] = useState('');

  // Función para generar iniciales del nombre del aula (igual que en cursos)
  const generateInitials = (nombre: string): string => {
    return nombre
      .split(' ')
      .map(word => word.charAt(0).toUpperCase())
      .join('')
      .substring(0, 2); // Máximo 2 caracteres
  };

  // Función para generar código automático basado en nombre (igual que en cursos)
  const generateAulaCode = async (nombreAula: string): Promise<string> => {
    if (!nombreAula.trim()) return '';
    
    const initials = generateInitials(nombreAula);
    
    try {
      // Consultar todas las aulas existentes para generar código único
      const response = await fetch(`${API_BASE}/api/aulas?limit=1000`);
      if (!response.ok) {
        console.log('Error consultando aulas existentes, usando fallback');
        return `${initials}-AUL-001`;
      }
      
      const data = await response.json();
      const existingCodes = data.aulas?.map((a: any) => a.codigo_aula) || [];
      
      // Filtrar códigos que empiecen con las mismas iniciales
      const sameInitialsCodes = existingCodes.filter((code: string) => 
        code.startsWith(`${initials}-AUL-`)
      );
      
      // Buscar el próximo número disponible para estas iniciales
      let nextNumber = 1;
      let newCode = '';
      
      do {
        newCode = `${initials}-AUL-${nextNumber.toString().padStart(3, '0')}`;
        nextNumber++;
      } while (existingCodes.includes(newCode));
      
      console.log(`=== GENERACIÓN DE CÓDIGO AULA ===`);
      console.log(`Nombre: ${nombreAula}`);
      console.log(`Iniciales: ${initials}`);
      console.log(`Códigos existentes con mismas iniciales:`, sameInitialsCodes);
      console.log(`Próximo número: ${nextNumber - 1}`);
      console.log(`Código generado: ${newCode}`);
      console.log(`================================`);
      
      return newCode;
      
    } catch (error) {
      console.error('Error generando código:', error);
      // Fallback simple
      return `${initials}-AUL-001`;
    }
  };

  // Función para obtener aulas
  const fetchAulas = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const params = new URLSearchParams();
      params.set('page', String(page));
      params.set('limit', String(limit));
      if (searchTerm) params.set('search', searchTerm);
      if (filterEstado !== 'todos') params.set('estado', filterEstado);
      
      const response = await fetch(`${API_BASE}/api/aulas?${params.toString()}`);
      
      if (!response.ok) {
        throw new Error(`Error ${response.status}: ${response.statusText}`);
      }
      
      const data = await response.json();
      setAulas(data.aulas || []);
      setTotalCount(data.total || 0);
    } catch (err) {
      console.error('Error al obtener aulas:', err);
      setError(err instanceof Error ? err.message : 'Error desconocido');
      setAulas([]);
    } finally {
      setLoading(false);
    }
  };

  // Función para crear aula
  const handleCreateAula = async () => {
    try {
      setLoading(true);
      
      // Generar código automático basado en el nombre
      const codigo = autoGeneratedCode || await generateAulaCode(formData.nombre);
      
      const aulaData = {
        ...formData,
        codigo_aula: codigo
      };
      
      const response = await fetch(`${API_BASE}/api/aulas`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(aulaData),
      });

      if (!response.ok) {
        throw new Error('Error al crear aula');
      }

      await fetchAulas();
      setShowCreateModal(false);
      setFormData({ nombre: '', ubicacion: '', descripcion: '', estado: 'activa' });
      setAutoGeneratedCode('');
    } catch (err) {
      console.error('Error al crear aula:', err);
      setError(err instanceof Error ? err.message : 'Error al crear aula');
    } finally {
      setLoading(false);
    }
  };

  // Función para actualizar aula
  const handleUpdateAula = async () => {
    if (!selectedAula) return;

    try {
      setLoading(true);
      const response = await fetch(`${API_BASE}/api/aulas/${selectedAula.id_aula}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      if (!response.ok) {
        throw new Error('Error al actualizar aula');
      }

      await fetchAulas();
      setShowModal(false);
      setSelectedAula(null);
    } catch (err) {
      console.error('Error al actualizar aula:', err);
      setError(err instanceof Error ? err.message : 'Error al actualizar aula');
    } finally {
      setLoading(false);
    }
  };

  // Efectos
  useEffect(() => {
    fetchAulas();
  }, [page, limit, searchTerm, filterEstado]);

  // Función para abrir modal de edición
  const openEditModal = (aula: Aula) => {
    setSelectedAula(aula);
    setFormData({
      nombre: aula.nombre,
      ubicacion: aula.ubicacion || '',
      descripcion: aula.descripcion || '',
      estado: aula.estado
    });
    setShowModal(true);
  };

  // Función para obtener color del estado
  const getEstadoColor = (estado: string) => {
    switch (estado) {
      case 'activa': return '#10b981';
      case 'inactiva': return '#6b7280';
      case 'mantenimiento': return '#f59e0b';
      case 'reservada': return '#3b82f6';
      default: return '#6b7280';
    }
  };

  // Función para obtener texto del estado
  const getEstadoText = (estado: string) => {
    switch (estado) {
      case 'activa': return 'Activa';
      case 'inactiva': return 'Inactiva';
      case 'mantenimiento': return 'Mantenimiento';
      case 'reservada': return 'Reservada';
      default: return estado;
    }
  };

  const totalPages = Math.ceil(totalCount / limit);
  const aulasActivas = aulas.filter(a => a.estado === 'activa').length;

  return (
    <div style={{ padding: '32px', minHeight: '100vh' }}>
      {/* Header */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        marginBottom: '32px' 
      }}>
        <div>
          <h1 style={{ 
            fontSize: '2rem', 
            fontWeight: '700', 
            color: 'var(--admin-text-primary)', 
            margin: 0,
            display: 'flex',
            alignItems: 'center',
            gap: '12px'
          }}>
            <Building2 size={32} color="var(--admin-accent)" />
            Gestión de Aulas
          </h1>
          <p style={{ 
            color: 'var(--admin-text-secondary)', 
            margin: '8px 0 0 0',
            fontSize: '1rem'
          }}>
            Administra las aulas y espacios físicos de la institución
          </p>
        </div>
        
        <button
          onClick={() => {
            setShowCreateModal(true);
            // Limpiar código al abrir modal (se generará cuando escriba el nombre)
            setAutoGeneratedCode('');
          }}
          style={{
            background: 'linear-gradient(135deg, var(--admin-accent), #dc2626)',
            color: 'white',
            border: 'none',
            borderRadius: '12px',
            padding: '12px 24px',
            fontSize: '1rem',
            fontWeight: '600',
            cursor: 'pointer',
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            transition: 'all 0.2s ease',
            boxShadow: '0 4px 12px rgba(239, 68, 68, 0.3)'
          }}
          onMouseEnter={(e) => {
            e.currentTarget.style.transform = 'translateY(-2px)';
            e.currentTarget.style.boxShadow = '0 6px 20px rgba(239, 68, 68, 0.4)';
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.transform = 'translateY(0)';
            e.currentTarget.style.boxShadow = '0 4px 12px rgba(239, 68, 68, 0.3)';
          }}
        >
          <Plus size={20} />
          Nueva Aula
        </button>
      </div>

      {/* Estadísticas */}
      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', 
        gap: '20px', 
        marginBottom: '32px' 
      }}>
        <div style={{
          background: 'var(--admin-card-bg)',
          border: '1px solid var(--admin-border)',
          borderRadius: '16px',
          padding: '24px',
          textAlign: 'center'
        }}>
          <div style={{ 
            fontSize: '2.5rem', 
            fontWeight: '700', 
            color: 'var(--admin-accent)', 
            marginBottom: '8px' 
          }}>
            {totalCount}
          </div>
          <div style={{ 
            color: 'var(--admin-text-secondary)', 
            fontSize: '0.9rem',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            gap: '6px'
          }}>
            <Building2 size={16} />
            Total Aulas
          </div>
        </div>

        <div style={{
          background: 'var(--admin-card-bg)',
          border: '1px solid var(--admin-border)',
          borderRadius: '16px',
          padding: '24px',
          textAlign: 'center'
        }}>
          <div style={{ 
            fontSize: '2.5rem', 
            fontWeight: '700', 
            color: '#10b981', 
            marginBottom: '8px' 
          }}>
            {aulasActivas}
          </div>
          <div style={{ 
            color: 'var(--admin-text-secondary)', 
            fontSize: '0.9rem',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            gap: '6px'
          }}>
            <Building2 size={16} />
            Aulas Activas
          </div>
        </div>
      </div>

      {/* Filtros y búsqueda */}
      <div style={{
        background: 'var(--admin-card-bg)',
        border: '1px solid var(--admin-border)',
        borderRadius: '16px',
        padding: '24px',
        marginBottom: '24px'
      }}>
        <div style={{ 
          display: 'grid', 
          gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', 
          gap: '20px',
          alignItems: 'end'
        }}>
          {/* Búsqueda */}
          <div>
            <label style={{ 
              display: 'block', 
              marginBottom: '8px', 
              fontWeight: '500',
              color: 'var(--admin-text-primary)'
            }}>
              Buscar aula
            </label>
            <div style={{ position: 'relative' }}>
              <Search 
                size={20} 
                style={{ 
                  position: 'absolute', 
                  left: '12px', 
                  top: '50%', 
                  transform: 'translateY(-50%)',
                  color: 'var(--admin-text-muted)'
                }} 
              />
              <input
                type="text"
                placeholder="Buscar por código, nombre o ubicación..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                style={{
                  width: '100%',
                  padding: '12px 12px 12px 44px',
                  border: '1px solid var(--admin-input-border)',
                  borderRadius: '8px',
                  background: 'var(--admin-input-bg)',
                  color: 'var(--admin-text-primary)',
                  fontSize: '0.95rem'
                }}
              />
            </div>
          </div>

          {/* Filtro por estado */}
          <div>
            <label style={{ 
              display: 'block', 
              marginBottom: '8px', 
              fontWeight: '500',
              color: 'var(--admin-text-primary)'
            }}>
              Estado
            </label>
            <StyledSelect
              name="filterEstado"
              value={filterEstado}
              onChange={(e) => setFilterEstado(e.target.value)}
              options={[
                { value: 'todos', label: 'Todos los estados' },
                { value: 'activa', label: 'Activa' },
                { value: 'inactiva', label: 'Inactiva' },
                { value: 'mantenimiento', label: 'Mantenimiento' },
                { value: 'reservada', label: 'Reservada' }
              ]}
              style={{ width: '100%' }}
            />
          </div>

          {/* Elementos por página */}
          <div>
            <label style={{ 
              display: 'block', 
              marginBottom: '8px', 
              fontWeight: '500',
              color: 'var(--admin-text-primary)'
            }}>
              Mostrar
            </label>
            <StyledSelect
              name="limit"
              value={limit}
              onChange={(e) => setLimit(Number(e.target.value))}
              options={[
                { value: 5, label: '5 por página' },
                { value: 10, label: '10 por página' },
                { value: 20, label: '20 por página' },
                { value: 50, label: '50 por página' }
              ]}
              style={{ width: '100%' }}
            />
          </div>
        </div>
      </div>

      {/* Tabla de aulas */}
      <div style={{
        background: 'var(--admin-card-bg)',
        border: '1px solid var(--admin-border)',
        borderRadius: '16px',
        overflow: 'hidden'
      }}>
        {loading ? (
          <div style={{ 
            padding: '60px', 
            textAlign: 'center',
            color: 'var(--admin-text-secondary)'
          }}>
            <div style={{ marginBottom: '16px' }}>
              <div style={{
                width: '40px',
                height: '40px',
                border: '3px solid var(--admin-border)',
                borderTop: '3px solid var(--admin-accent)',
                borderRadius: '50%',
                animation: 'spin 1s linear infinite',
                margin: '0 auto'
              }} />
            </div>
            Cargando aulas...
          </div>
        ) : error ? (
          <div style={{ 
            padding: '60px', 
            textAlign: 'center',
            color: '#ef4444'
          }}>
            <AlertCircle size={48} style={{ marginBottom: '16px' }} />
            <div style={{ fontSize: '1.1rem', fontWeight: '600', marginBottom: '8px' }}>
              Error al cargar aulas
            </div>
            <div style={{ color: 'var(--admin-text-muted)' }}>
              {error}
            </div>
            <button
              onClick={fetchAulas}
              style={{
                marginTop: '16px',
                padding: '8px 16px',
                background: 'var(--admin-accent)',
                color: 'white',
                border: 'none',
                borderRadius: '6px',
                cursor: 'pointer'
              }}
            >
              Reintentar
            </button>
          </div>
        ) : aulas.length === 0 ? (
          <div style={{ 
            padding: '60px', 
            textAlign: 'center',
            color: 'var(--admin-text-secondary)'
          }}>
            <Building2 size={48} style={{ marginBottom: '16px', opacity: 0.5 }} />
            <div style={{ fontSize: '1.1rem', fontWeight: '600', marginBottom: '8px' }}>
              No se encontraron aulas
            </div>
            <div>
              {searchTerm || filterEstado !== 'todos' 
                ? 'Intenta ajustar los filtros de búsqueda'
                : 'Comienza creando tu primera aula'
              }
            </div>
          </div>
        ) : (
          <>
            <div style={{ overflowX: 'auto' }}>
              <table style={{ width: '100%', borderCollapse: 'collapse' }}>
                <thead>
                  <tr style={{ background: 'var(--admin-hover-bg)' }}>
                    <th style={{ 
                      padding: '16px', 
                      textAlign: 'left', 
                      fontWeight: '600',
                      color: 'var(--admin-text-primary)',
                      borderBottom: '1px solid var(--admin-border)'
                    }}>
                      Código
                    </th>
                    <th style={{ 
                      padding: '16px', 
                      textAlign: 'left', 
                      fontWeight: '600',
                      color: 'var(--admin-text-primary)',
                      borderBottom: '1px solid var(--admin-border)'
                    }}>
                      Nombre
                    </th>
                    <th style={{ 
                      padding: '16px', 
                      textAlign: 'left', 
                      fontWeight: '600',
                      color: 'var(--admin-text-primary)',
                      borderBottom: '1px solid var(--admin-border)'
                    }}>
                      Ubicación
                    </th>
                    <th style={{ 
                      padding: '16px', 
                      textAlign: 'left', 
                      fontWeight: '600',
                      color: 'var(--admin-text-primary)',
                      borderBottom: '1px solid var(--admin-border)'
                    }}>
                      Estado
                    </th>
                    <th style={{ 
                      padding: '16px', 
                      textAlign: 'left', 
                      fontWeight: '600',
                      color: 'var(--admin-text-primary)',
                      borderBottom: '1px solid var(--admin-border)'
                    }}>
                      Fecha Creación
                    </th>
                    <th style={{ 
                      padding: '16px', 
                      textAlign: 'center', 
                      fontWeight: '600',
                      color: 'var(--admin-text-primary)',
                      borderBottom: '1px solid var(--admin-border)'
                    }}>
                      Acciones
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {aulas.map((aula) => (
                    <tr 
                      key={aula.id_aula}
                      style={{ 
                        borderBottom: '1px solid var(--admin-border)',
                        transition: 'background-color 0.2s ease'
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.background = 'var(--admin-hover-bg)';
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.background = 'transparent';
                      }}
                    >
                      <td style={{ padding: '16px' }}>
                        <div style={{ 
                          fontWeight: '600',
                          color: 'var(--admin-accent)',
                          fontSize: '0.95rem'
                        }}>
                          {aula.codigo_aula}
                        </div>
                      </td>
                      <td style={{ padding: '16px' }}>
                        <div style={{ 
                          fontWeight: '500',
                          color: 'var(--admin-text-primary)',
                          marginBottom: '4px'
                        }}>
                          {aula.nombre}
                        </div>
                        {aula.descripcion && (
                          <div style={{ 
                            fontSize: '0.85rem',
                            color: 'var(--admin-text-muted)',
                            maxWidth: '200px',
                            overflow: 'hidden',
                            textOverflow: 'ellipsis',
                            whiteSpace: 'nowrap'
                          }}>
                            {aula.descripcion}
                          </div>
                        )}
                      </td>
                      <td style={{ padding: '16px' }}>
                        <div style={{ 
                          display: 'flex',
                          alignItems: 'center',
                          gap: '6px',
                          color: 'var(--admin-text-secondary)'
                        }}>
                          <MapPin size={14} />
                          {aula.ubicacion || 'No especificada'}
                        </div>
                      </td>
                      <td style={{ padding: '16px' }}>
                        <span style={{
                          padding: '4px 12px',
                          borderRadius: '20px',
                          fontSize: '0.85rem',
                          fontWeight: '500',
                          background: `${getEstadoColor(aula.estado)}20`,
                          color: getEstadoColor(aula.estado),
                          border: `1px solid ${getEstadoColor(aula.estado)}40`
                        }}>
                          {getEstadoText(aula.estado)}
                        </span>
                      </td>
                      <td style={{ padding: '16px' }}>
                        <div style={{ 
                          display: 'flex',
                          alignItems: 'center',
                          gap: '6px',
                          color: 'var(--admin-text-secondary)',
                          fontSize: '0.9rem'
                        }}>
                          <Calendar size={14} />
                          {new Date(aula.fecha_creacion).toLocaleDateString('es-ES')}
                        </div>
                      </td>
                      <td style={{ padding: '16px', textAlign: 'center' }}>
                        <div style={{ display: 'flex', gap: '8px', justifyContent: 'center' }}>
                          <button
                            onClick={() => openEditModal(aula)}
                            style={{
                              padding: '8px',
                              background: '#3b82f6',
                              color: 'white',
                              border: 'none',
                              borderRadius: '6px',
                              cursor: 'pointer',
                              display: 'flex',
                              alignItems: 'center',
                              transition: 'all 0.2s ease'
                            }}
                            onMouseEnter={(e) => {
                              e.currentTarget.style.background = '#2563eb';
                              e.currentTarget.style.transform = 'translateY(-1px)';
                            }}
                            onMouseLeave={(e) => {
                              e.currentTarget.style.background = '#3b82f6';
                              e.currentTarget.style.transform = 'translateY(0)';
                            }}
                          >
                            <Edit size={16} />
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            {/* Paginación */}
            {totalPages > 1 && (
              <div style={{
                padding: '20px',
                borderTop: '1px solid var(--admin-border)',
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center'
              }}>
                <div style={{ color: 'var(--admin-text-secondary)', fontSize: '0.9rem' }}>
                  Mostrando {((page - 1) * limit) + 1} - {Math.min(page * limit, totalCount)} de {totalCount} aulas
                </div>
                <div style={{ display: 'flex', gap: '8px' }}>
                  <button
                    onClick={() => setPage(Math.max(1, page - 1))}
                    disabled={page === 1}
                    style={{
                      padding: '8px 12px',
                      background: page === 1 ? 'var(--admin-hover-bg)' : 'var(--admin-accent)',
                      color: page === 1 ? 'var(--admin-text-muted)' : 'white',
                      border: 'none',
                      borderRadius: '6px',
                      cursor: page === 1 ? 'not-allowed' : 'pointer'
                    }}
                  >
                    Anterior
                  </button>
                  <span style={{ 
                    padding: '8px 16px',
                    color: 'var(--admin-text-primary)',
                    display: 'flex',
                    alignItems: 'center'
                  }}>
                    {page} de {totalPages}
                  </span>
                  <button
                    onClick={() => setPage(Math.min(totalPages, page + 1))}
                    disabled={page === totalPages}
                    style={{
                      padding: '8px 12px',
                      background: page === totalPages ? 'var(--admin-hover-bg)' : 'var(--admin-accent)',
                      color: page === totalPages ? 'var(--admin-text-muted)' : 'white',
                      border: 'none',
                      borderRadius: '6px',
                      cursor: page === totalPages ? 'not-allowed' : 'pointer'
                    }}
                  >
                    Siguiente
                  </button>
                </div>
              </div>
            )}
          </>
        )}
      </div>

      {/* Modal Crear Aula */}
      {showCreateModal && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            background: 'var(--admin-modal-bg)',
            borderRadius: '16px',
            padding: '32px',
            width: '90%',
            maxWidth: '500px',
            maxHeight: '90vh',
            overflowY: 'auto',
            border: '1px solid var(--admin-border)'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '24px'
            }}>
              <h2 style={{
                margin: 0,
                fontSize: '1.5rem',
                fontWeight: '700',
                color: 'var(--admin-text-primary)',
                display: 'flex',
                alignItems: 'center',
                gap: '12px'
              }}>
                <Building2 size={24} color="var(--admin-accent)" />
                Nueva Aula
              </h2>
              <button
                onClick={() => {
                  setShowCreateModal(false);
                  setFormData({ nombre: '', ubicacion: '', descripcion: '', estado: 'activa' });
                }}
                style={{
                  background: 'none',
                  border: 'none',
                  cursor: 'pointer',
                  padding: '4px',
                  borderRadius: '4px',
                  color: 'var(--admin-text-muted)'
                }}
              >
                <X size={24} />
              </button>
            </div>

            <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
              {/* Primera fila: Código y Nombre */}
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px' }}>
                <div>
                  <label style={{
                    display: 'block',
                    marginBottom: '8px',
                    fontWeight: '500',
                    color: 'var(--admin-text-primary)'
                  }}>
                    Código
                  </label>
                  <input
                    type="text"
                    value={autoGeneratedCode || 'Se genera automáticamente'}
                    readOnly
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '1px solid var(--admin-input-border)',
                      borderRadius: '8px',
                      background: 'var(--admin-hover-bg)',
                      color: 'var(--admin-text-muted)',
                      fontSize: '0.95rem',
                      cursor: 'not-allowed'
                    }}
                  />
                  <div style={{
                    fontSize: '0.8rem',
                    color: 'var(--admin-text-muted)',
                    marginTop: '4px'
                  }}>
                    Se genera automáticamente basado en el nombre del aula.
                  </div>
                </div>
                
                <div>
                  <label style={{
                    display: 'block',
                    marginBottom: '8px',
                    fontWeight: '500',
                    color: 'var(--admin-text-primary)'
                  }}>
                    Nombre *
                  </label>
                  <input
                    type="text"
                    value={formData.nombre}
                    onChange={async (e) => {
                      const nombre = e.target.value;
                      setFormData({ ...formData, nombre });
                      
                      // Generar código automáticamente cuando escriba el nombre
                      if (nombre.trim().length > 2) {
                        try {
                          const codigo = await generateAulaCode(nombre);
                          setAutoGeneratedCode(codigo);
                        } catch (error) {
                          console.error('Error generando código:', error);
                          const initials = generateInitials(nombre);
                          setAutoGeneratedCode(`${initials}-AUL-001`);
                        }
                      } else {
                        setAutoGeneratedCode('');
                      }
                    }}
                    placeholder="Ej: Cosmetología, Peluquería Básica, Manicure y Pedicure"
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '1px solid var(--admin-input-border)',
                      borderRadius: '8px',
                      background: 'var(--admin-input-bg)',
                      color: 'var(--admin-text-primary)',
                      fontSize: '0.95rem'
                    }}
                    required
                  />
                  <div style={{
                    fontSize: '0.8rem',
                    color: 'var(--admin-text-muted)',
                    marginTop: '4px'
                  }}>
                    💡 El código se genera automáticamente basado en las iniciales del nombre
                  </div>
                </div>
              </div>

              {/* Segunda fila: Descripción completa */}
              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '8px',
                  fontWeight: '500',
                  color: 'var(--admin-text-primary)'
                }}>
                  Descripción
                </label>
                <textarea
                  value={formData.descripcion}
                  onChange={(e) => setFormData({ ...formData, descripcion: e.target.value })}
                  placeholder="Descripción del aula y sus características..."
                  rows={3}
                  style={{
                    width: '100%',
                    padding: '12px',
                    border: '1px solid var(--admin-input-border)',
                    borderRadius: '8px',
                    background: 'var(--admin-input-bg)',
                    color: 'var(--admin-text-primary)',
                    fontSize: '0.95rem',
                    resize: 'vertical',
                    fontFamily: 'inherit'
                  }}
                />
              </div>

              {/* Tercera fila: Ubicación y Estado */}
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '20px' }}>
                <div>
                  <label style={{
                    display: 'block',
                    marginBottom: '8px',
                    fontWeight: '500',
                    color: 'var(--admin-text-primary)'
                  }}>
                    Ubicación
                  </label>
                  <input
                    type="text"
                    value={formData.ubicacion}
                    onChange={(e) => setFormData({ ...formData, ubicacion: e.target.value })}
                    placeholder="Ej: Edificio A - Piso 2"
                    style={{
                      width: '100%',
                      padding: '12px',
                      border: '1px solid var(--admin-input-border)',
                      borderRadius: '8px',
                      background: 'var(--admin-input-bg)',
                      color: 'var(--admin-text-primary)',
                      fontSize: '0.95rem'
                    }}
                  />
                </div>

                <div>
                  <label style={{
                    display: 'block',
                    marginBottom: '8px',
                    fontWeight: '500',
                    color: 'var(--admin-text-primary)'
                  }}>
                    Estado
                  </label>
                  <StyledSelect
                    name="estado"
                    value={formData.estado}
                    onChange={(e) => setFormData({ ...formData, estado: e.target.value as any })}
                    options={[
                      { value: 'activa', label: 'Activa' },
                      { value: 'inactiva', label: 'Inactiva' },
                      { value: 'mantenimiento', label: 'Mantenimiento' },
                      { value: 'reservada', label: 'Reservada' }
                    ]}
                    style={{ width: '100%' }}
                  />
                </div>
              </div>
            </div>

            {/* Botones */}
            <div style={{
              display: 'flex',
              gap: '12px',
              marginTop: '32px',
              justifyContent: 'flex-end'
            }}>
              <button
                onClick={() => {
                  setShowCreateModal(false);
                  setFormData({ nombre: '', ubicacion: '', descripcion: '', estado: 'activa' });
                }}
                style={{
                  padding: '12px 24px',
                  background: 'var(--admin-hover-bg)',
                  color: 'var(--admin-text-secondary)',
                  border: '1px solid var(--admin-border)',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '0.95rem',
                  fontWeight: '500'
                }}
              >
                Cancelar
              </button>
              <button
                onClick={handleCreateAula}
                disabled={!formData.nombre.trim() || loading}
                style={{
                  padding: '12px 24px',
                  background: !formData.nombre.trim() || loading ? 'var(--admin-hover-bg)' : '#ef4444',
                  color: !formData.nombre.trim() || loading ? 'var(--admin-text-muted)' : 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: !formData.nombre.trim() || loading ? 'not-allowed' : 'pointer',
                  fontSize: '0.95rem',
                  fontWeight: '600',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px'
                }}
              >
                {loading ? (
                  <>
                    <div style={{
                      width: '16px',
                      height: '16px',
                      border: '2px solid transparent',
                      borderTop: '2px solid currentColor',
                      borderRadius: '50%',
                      animation: 'spin 1s linear infinite'
                    }} />
                    Creando...
                  </>
                ) : (
                  <>
                    <Building2 size={16} />
                    Crear Aula
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal Editar Aula */}
      {showModal && selectedAula && (
        <div style={{
          position: 'fixed',
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: 'rgba(0, 0, 0, 0.5)',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          zIndex: 1000
        }}>
          <div style={{
            background: 'var(--admin-modal-bg)',
            borderRadius: '16px',
            padding: '32px',
            width: '90%',
            maxWidth: '500px',
            maxHeight: '90vh',
            overflowY: 'auto',
            border: '1px solid var(--admin-border)'
          }}>
            <div style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              marginBottom: '24px'
            }}>
              <h2 style={{
                margin: 0,
                fontSize: '1.5rem',
                fontWeight: '700',
                color: 'var(--admin-text-primary)',
                display: 'flex',
                alignItems: 'center',
                gap: '12px'
              }}>
                <Edit size={24} color="var(--admin-accent)" />
                Editar Aula
              </h2>
              <button
                onClick={() => {
                  setShowModal(false);
                  setSelectedAula(null);
                }}
                style={{
                  background: 'none',
                  border: 'none',
                  cursor: 'pointer',
                  padding: '4px',
                  borderRadius: '4px',
                  color: 'var(--admin-text-muted)'
                }}
              >
                <X size={24} />
              </button>
            </div>

            {/* Información del aula */}
            <div style={{
              background: 'var(--admin-hover-bg)',
              padding: '16px',
              borderRadius: '8px',
              marginBottom: '24px',
              border: '1px solid var(--admin-border)'
            }}>
              <div style={{
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                marginBottom: '8px'
              }}>
                <Building2 size={16} color="var(--admin-accent)" />
                <span style={{
                  fontWeight: '600',
                  color: 'var(--admin-text-primary)'
                }}>
                  {selectedAula.codigo_aula}
                </span>
              </div>
              <div style={{
                fontSize: '0.9rem',
                color: 'var(--admin-text-secondary)'
              }}>
                Creada el {new Date(selectedAula.fecha_creacion).toLocaleDateString('es-ES')}
              </div>
            </div>

            <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
              {/* Nombre */}
              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '8px',
                  fontWeight: '500',
                  color: 'var(--admin-text-primary)'
                }}>
                  Nombre del Aula *
                </label>
                <input
                  type="text"
                  value={formData.nombre}
                  onChange={(e) => setFormData({ ...formData, nombre: e.target.value })}
                  placeholder="Ej: Aula de Teoría 1"
                  style={{
                    width: '100%',
                    padding: '12px',
                    border: '1px solid var(--admin-input-border)',
                    borderRadius: '8px',
                    background: 'var(--admin-input-bg)',
                    color: 'var(--admin-text-primary)',
                    fontSize: '0.95rem'
                  }}
                  required
                />
              </div>

              {/* Ubicación */}
              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '8px',
                  fontWeight: '500',
                  color: 'var(--admin-text-primary)'
                }}>
                  Ubicación
                </label>
                <input
                  type="text"
                  value={formData.ubicacion}
                  onChange={(e) => setFormData({ ...formData, ubicacion: e.target.value })}
                  placeholder="Ej: Edificio A - Piso 2"
                  style={{
                    width: '100%',
                    padding: '12px',
                    border: '1px solid var(--admin-input-border)',
                    borderRadius: '8px',
                    background: 'var(--admin-input-bg)',
                    color: 'var(--admin-text-primary)',
                    fontSize: '0.95rem'
                  }}
                />
              </div>

              {/* Descripción */}
              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '8px',
                  fontWeight: '500',
                  color: 'var(--admin-text-primary)'
                }}>
                  Descripción
                </label>
                <textarea
                  value={formData.descripcion}
                  onChange={(e) => setFormData({ ...formData, descripcion: e.target.value })}
                  placeholder="Descripción del aula y sus características..."
                  rows={3}
                  style={{
                    width: '100%',
                    padding: '12px',
                    border: '1px solid var(--admin-input-border)',
                    borderRadius: '8px',
                    background: 'var(--admin-input-bg)',
                    color: 'var(--admin-text-primary)',
                    fontSize: '0.95rem',
                    resize: 'vertical',
                    fontFamily: 'inherit'
                  }}
                />
              </div>

              {/* Estado */}
              <div>
                <label style={{
                  display: 'block',
                  marginBottom: '8px',
                  fontWeight: '500',
                  color: 'var(--admin-text-primary)'
                }}>
                  Estado
                </label>
                <StyledSelect
                  name="estadoEdit"
                  value={formData.estado}
                  onChange={(e) => setFormData({ ...formData, estado: e.target.value as any })}
                  options={[
                    { value: 'activa', label: 'Activa' },
                    { value: 'inactiva', label: 'Inactiva' },
                    { value: 'mantenimiento', label: 'Mantenimiento' },
                    { value: 'reservada', label: 'Reservada' }
                  ]}
                  style={{ width: '100%' }}
                />
              </div>
            </div>

            {/* Botones */}
            <div style={{
              display: 'flex',
              gap: '12px',
              marginTop: '32px',
              justifyContent: 'flex-end'
            }}>
              <button
                onClick={() => {
                  setShowModal(false);
                  setSelectedAula(null);
                }}
                style={{
                  padding: '12px 24px',
                  background: 'var(--admin-hover-bg)',
                  color: 'var(--admin-text-secondary)',
                  border: '1px solid var(--admin-border)',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  fontSize: '0.95rem',
                  fontWeight: '500'
                }}
              >
                Cancelar
              </button>
              <button
                onClick={handleUpdateAula}
                disabled={!formData.nombre.trim() || loading}
                style={{
                  padding: '12px 24px',
                  background: !formData.nombre.trim() || loading ? 'var(--admin-hover-bg)' : 'var(--admin-accent)',
                  color: !formData.nombre.trim() || loading ? 'var(--admin-text-muted)' : 'white',
                  border: 'none',
                  borderRadius: '8px',
                  cursor: !formData.nombre.trim() || loading ? 'not-allowed' : 'pointer',
                  fontSize: '0.95rem',
                  fontWeight: '600',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '8px'
                }}
              >
                {loading ? (
                  <>
                    <div style={{
                      width: '16px',
                      height: '16px',
                      border: '2px solid transparent',
                      borderTop: '2px solid currentColor',
                      borderRadius: '50%',
                      animation: 'spin 1s linear infinite'
                    }} />
                    Guardando...
                  </>
                ) : (
                  <>
                    <Edit size={16} />
                    Guardar Cambios
                  </>
                )}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Estilos CSS para animaciones */}
      <style>{`
        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }
      `}</style>
    </div>
  );
};

export default GestionAulas;

import React, { useState, useEffect } from 'react';
import { 
  Search, Plus, Edit, Eye, Trash2, X, Save, BookOpen
} from 'lucide-react';
import { StyledSelect } from '../../components/StyledSelect';

type Course = {
  id_curso: number;
  codigo_curso: string;
  id_tipo_curso: number;
  nombre: string;
  capacidad_maxima: number;
  fecha_inicio: string; // YYYY-MM-DD
  fecha_fin: string; // YYYY-MM-DD
  estado: 'planificado' | 'activo' | 'finalizado' | 'cancelado';
  cupos_disponibles?: number;
};

type EstadoFilter = 'todos' | Course['estado'];

// Opciones para selects (catálogos)
type TipoCursoOption = {
  id_tipo_curso: number;
  nombre: string;
  estado?: 'activo' | 'inactivo';
};

// Eliminado manejo de aulas en esta UI

const API_BASE = (import.meta as any).env?.VITE_API_URL || 'http://localhost:3000';

const GestionCursos = () => {
  const [cursos, setCursos] = useState<Course[]>([]);
  const [loading, setLoading] = useState(false);
  const [selectedCurso, setSelectedCurso] = useState<Course | null>(null);
  const [modalType, setModalType] = useState<'create' | 'edit' | 'view'>('create');
  const [showModal, setShowModal] = useState(false);
  const [filterEstado, setFilterEstado] = useState<string>('todos');
  const [searchTerm, setSearchTerm] = useState('');
  const [error, setError] = useState<string | null>(null);
  const [selectedTipoCurso, setSelectedTipoCurso] = useState<number | null>(null);
  const [autoGeneratedCode, setAutoGeneratedCode] = useState('');
  const [autoGeneratedName, setAutoGeneratedName] = useState('');
  const [tiposCursos, setTiposCursos] = useState<TipoCursoOption[]>([]);

  // Función para generar iniciales del tipo de curso
  const generateInitials = (nombre: string): string => {
    return nombre
      .split(' ')
      .map(word => word.charAt(0).toUpperCase())
      .join('')
      .substring(0, 2); // Máximo 2 caracteres
  };

  // Resolver el Tipo de Curso a partir de la lista cargada y los datos del curso
  const resolveTipoCursoForCurso = (curso: Course | null): TipoCursoOption | null => {
    if (!curso) return null;
    // 1) Por ID directo
    let tipo = tiposCursos.find(t => t.id_tipo_curso === curso.id_tipo_curso) || null;
    if (tipo) return tipo;
    // 2) Por nombre exacto (muchos cursos usan el nombre del tipo)
    tipo = tiposCursos.find(t => t.nombre.trim().toLowerCase() === curso.nombre.trim().toLowerCase()) || null;
    if (tipo) return tipo;
    // 3) Por iniciales: si el nombre del curso empieza por el nombre del tipo o viceversa
    const initials = generateInitials(curso.nombre);
    tipo = tiposCursos.find(t => generateInitials(t.nombre) === initials) || null;
    return tipo || null;
  };

  const getTipoCursoName = (curso: Course | null): string => {
    const t = resolveTipoCursoForCurso(curso);
    if (t) return t.nombre;
    const id = curso?.id_tipo_curso ?? 0;
    return id ? `Tipo ID ${id} (no encontrado)` : 'Tipo no encontrado';
  };

  // Función para generar código automático validando contra BD
  const generateCourseCode = async (tipoId: number): Promise<string> => {
    const tipo = tiposCursos.find(t => t.id_tipo_curso === tipoId);
    if (!tipo) return '';
    
    const initials = generateInitials(tipo.nombre);
    
    try {
      // Consultar todos los códigos existentes en la BD
      const response = await fetch(`${API_BASE}/api/cursos?limit=1000`);
      if (!response.ok) {
        console.log('Error consultando cursos existentes, usando datos locales');
        // Fallback a datos locales si falla la consulta
        const existingCourses = cursos.filter(curso => {
          const tipoDelCurso = tiposCursos.find(t => t.id_tipo_curso === curso.id_tipo_curso);
          return tipoDelCurso && generateInitials(tipoDelCurso.nombre) === initials;
        });
        const nextNumber = existingCourses.length + 1;
        return `${initials}-${nextNumber.toString().padStart(3, '0')}`;
      }
      
      const cursosData = await response.json();
      const cursosReales = Array.isArray(cursosData) ? cursosData : (Array.isArray(cursosData?.rows) ? cursosData.rows : []);
      
      // Obtener todos los códigos existentes que empiecen con las mismas iniciales
      const existingCodes = cursosReales
        .map((curso: any) => curso.codigo_curso)
        .filter((codigo: string) => codigo && codigo.startsWith(`${initials}-`))
        .map((codigo: string) => {
          const numberPart = codigo.split('-')[1];
          return parseInt(numberPart) || 0;
        })
        .sort((a: number, b: number) => a - b);
      
      // Encontrar el siguiente número disponible
      let nextNumber = 1;
      for (const num of existingCodes) {
        if (num === nextNumber) {
          nextNumber++;
        } else {
          break;
        }
      }
      
      const newCode = `${initials}-${nextNumber.toString().padStart(3, '0')}`;
      
      console.log(`=== GENERACIÓN DE CÓDIGO (BD) ===`);
      console.log(`Tipo: ${tipo.nombre}`);
      console.log(`Iniciales: ${initials}`);
      console.log(`Códigos existentes en BD:`, existingCodes);
      console.log(`Próximo número: ${nextNumber}`);
      console.log(`Código generado: ${newCode}`);
      console.log(`================================`);
      
      return newCode;
      
    } catch (error) {
      console.error('Error generando código:', error);
      // Fallback a método simple
      const nextNumber = cursos.length + 1;
      return `${initials}-${nextNumber.toString().padStart(3, '0')}`;
    }
  };

  // Manejar cambio de tipo de curso
  const handleTipoCursoChange = async (e: React.ChangeEvent<HTMLSelectElement>) => {
    const tipoId = parseInt(e.target.value);
    setSelectedTipoCurso(tipoId);
    
    if (tipoId && (modalType === 'create' || modalType === 'edit')) {
      const tipo = tiposCursos.find(t => t.id_tipo_curso === tipoId);
      if (tipo) {
        // Generar código automático (ahora es async)
        try {
          const code = await generateCourseCode(tipoId);
          setAutoGeneratedCode(code);
        } catch (error) {
          console.error('Error generando código:', error);
          // Fallback simple
          const initials = generateInitials(tipo.nombre);
          const fallbackCode = `${initials}-001`;
          setAutoGeneratedCode(fallbackCode);
        }
        
        // Establecer nombre automático
        setAutoGeneratedName(tipo.nombre);
      }
    }
  };

  const fetchCursos = async (estadoFilter?: EstadoFilter) => {
    try {
      setLoading(true);
      setError(null);
      const estadoParam = (estadoFilter && estadoFilter !== 'todos') ? `estado=${estadoFilter}` : '';
      const qs = [estadoParam, 'limit=100'].filter(Boolean).join('&');
      const url = qs ? `${API_BASE}/api/cursos?${qs}` : `${API_BASE}/api/cursos`;
      const res = await fetch(url);
      if (!res.ok) throw new Error('No se pudo cargar cursos');
      const data = await res.json();
      const raw = Array.isArray(data) ? data : (Array.isArray((data as any)?.rows) ? (data as any).rows : (Array.isArray((data as any)?.data) ? (data as any).data : []));
      // map keys from list query to Course minimal view
      const normalized: Course[] = raw.map((row: any) => ({
        id_curso: row.id_curso,
        codigo_curso: row.codigo_curso,
        id_tipo_curso: row.id_tipo_curso ?? 0,
        nombre: row.nombre,
        capacidad_maxima: row.capacidad_maxima ?? 20,
        fecha_inicio: row.fecha_inicio?.slice(0,10),
        fecha_fin: row.fecha_fin?.slice(0,10),
        estado: row.estado,
        cupos_disponibles: row.cupos_disponibles ?? row.capacidad_maxima ?? 20
      }));
      setCursos(normalized);
    } catch (e: any) {
      setError(e.message || 'Error cargando cursos');
    } finally {
      setLoading(false);
    }
  };

  // Obtener un curso por ID con todos sus campos desde el backend
  const fetchCursoById = async (id: number): Promise<Course | null> => {
    try {
      const res = await fetch(`${API_BASE}/api/cursos/${id}`);
      if (!res.ok) return null;
      const row = await res.json();
      const c: Course = {
        id_curso: Number(row.id_curso ?? id),
        codigo_curso: String(row.codigo_curso ?? ''),
        id_tipo_curso: Number(row.id_tipo_curso ?? 0),
        nombre: String(row.nombre ?? ''),
        capacidad_maxima: Number(row.capacidad_maxima ?? 20),
        fecha_inicio: String((row.fecha_inicio ?? '').slice ? (row.fecha_inicio as string).slice(0,10) : row.fecha_inicio ?? ''),
        fecha_fin: String((row.fecha_fin ?? '').slice ? (row.fecha_fin as string).slice(0,10) : row.fecha_fin ?? ''),
        estado: (row.estado as Course['estado']) ?? 'planificado',
        cupos_disponibles: Number(row.cupos_disponibles ?? row.capacidad_maxima ?? 20)
      };
      return c;
    } catch {
      return null;
    }
  };

  // Bloquear/Reanudar matrícula
  const handleToggleMatricula = async (curso: Course) => {
    // Determinar el nuevo estado basado en el estado actual
    let target: Course['estado'];
    if (curso.estado === 'cancelado') {
      // Si está cancelado (bloqueado), reanudar a activo o planificado según las fechas
      const hoy = new Date();
      const fechaInicio = new Date(curso.fecha_inicio);
      target = fechaInicio <= hoy ? 'activo' : 'planificado';
    } else {
      // Si no está cancelado, bloquear (cancelar temporalmente)
      target = 'cancelado';
    }

    try {
      setLoading(true);
      setError(null);
      const res = await fetch(`${API_BASE}/api/cursos/${curso.id_curso}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ estado: target })
      });
      if (!res.ok) {
        const errorData = await res.json().catch(() => ({}));
        throw new Error(errorData.error || 'No se pudo actualizar el estado de matrícula');
      }
      
      // Actualizar estado local inmediatamente sin recargar
      setCursos(prev => prev.map(c => 
        c.id_curso === curso.id_curso 
          ? { ...c, estado: target }
          : c
      ));

      // Mostrar mensaje de confirmación
      const accion = target === 'cancelado' ? 'bloqueado' : 'reanudado';
      alert(`Curso ${accion} exitosamente. ${target === 'cancelado' ? 'Las matrículas están suspendidas.' : 'Las matrículas están habilitadas.'}`);
    } catch (e: any) {
      setError(e.message || 'Error actualizando estado');
      alert(`Error: ${e.message || 'No se pudo actualizar el estado del curso'}`);
    } finally {
      setLoading(false);
    }
  };

  // Funcionalidad de clonado eliminada

  useEffect(() => {
    fetchCursos(filterEstado as EstadoFilter);
    // cargar catálogos
    (async () => {
      try {
        // Cargar TODOS los tipos de curso (activos e inactivos) para mostrar nombres correctos
        const resTipos = await fetch(`${API_BASE}/api/tipos-cursos?limit=100`);
        if (resTipos.ok) {
          const dataTipos = await resTipos.json();
          setTiposCursos(dataTipos);
          console.log('Tipos de curso cargados:', dataTipos.length);
        }
      } catch (e) {
        console.error('Error cargando tipos de curso:', e);
        // silencioso, no bloquear UI por catálogos
      }
    })();
  }, [filterEstado]);

  const handleCreateCurso = () => {
    setSelectedCurso(null);
    setModalType('create');
    setSelectedTipoCurso(null);
    setAutoGeneratedCode('');
    setAutoGeneratedName('');
    setShowModal(true);
  };

  const handleEditCurso = async (curso: Course) => {
    console.log('=== EDITAR CURSO (abrir) ===');
    console.log('Listado -> id_tipo_curso:', curso.id_tipo_curso);
    setModalType('edit');
    setLoading(true);
    // Intentar obtener el curso con todos sus campos (incluido id_tipo_curso real)
    const full = await fetchCursoById(curso.id_curso);
    let finalCurso = full ?? curso;
    // Si el backend no trae id_tipo_curso válido, intentar resolverlo
    if (!finalCurso.id_tipo_curso || finalCurso.id_tipo_curso === 0) {
      const resolved = resolveTipoCursoForCurso(finalCurso);
      if (resolved) {
        finalCurso = { ...finalCurso, id_tipo_curso: resolved.id_tipo_curso };
        console.log('id_tipo_curso resuelto por frontend:', resolved);
      }
    }
    console.log('Backend -> curso completo:', full);
    console.log('Usado para edición -> id_tipo_curso:', finalCurso.id_tipo_curso);

    setSelectedCurso(finalCurso);
    setSelectedTipoCurso(finalCurso.id_tipo_curso);
    setAutoGeneratedCode('');
    setAutoGeneratedName('');
    setShowModal(true);
    setLoading(false);
  };

  const handleViewCurso = (curso: Course) => {
    setSelectedCurso(curso);
    setModalType('view');
    setShowModal(true);
  };

  const handleFilterEstadoChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilterEstado(e.target.value as EstadoFilter);
  };

  // Quick-add handlers eliminados: ahora Tipos/Aulas se gestionan en módulos dedicados

  const handleDeleteCurso = async (id: number) => {
    if (!window.confirm('¿Está seguro de que desea eliminar este curso?')) return;
    try {
      setLoading(true);
      setError(null);
      const res = await fetch(`${API_BASE}/api/cursos/${id}`, { method: 'DELETE' });
      if (!res.ok) throw new Error('No se pudo eliminar el curso');
      // Actualizar lista local inmediatamente sin recargar
      setCursos(prev => prev.filter(c => c.id_curso !== id));
    } catch (e: any) {
      setError(e.message || 'Error eliminando curso');
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const formData = new FormData(e.currentTarget);
    
    // Para crear curso, usar el código y nombre generados automáticamente
    const codigo = modalType === 'create' ? autoGeneratedCode : String(formData.get('codigo_curso') || '');
    const nombre = modalType === 'create' ? 
      (String(formData.get('nombre') || '') || autoGeneratedName) : 
      String(formData.get('nombre') || '');
    
    const courseData: Omit<Course, 'id_curso'> = {
      codigo_curso: codigo,
      id_tipo_curso: Number(formData.get('id_tipo_curso')),
      nombre: nombre,
      capacidad_maxima: Number(formData.get('capacidad_maxima')),
      fecha_inicio: String(formData.get('fecha_inicio') || ''),
      fecha_fin: String(formData.get('fecha_fin') || ''),
      estado: String(formData.get('estado') || 'planificado') as Course['estado']
    };
    
    // Validar que se haya generado el código automáticamente
    if (modalType === 'create' && !courseData.codigo_curso) {
      setError('Debe seleccionar un tipo de curso para generar el código automáticamente');
      return;
    }
    // Solo incluir codigo_curso cuando se edita; en creación el backend lo genera automáticamente
    const payload = (modalType === 'edit' && selectedCurso)
      ? { ...courseData, codigo_curso: String(formData.get('codigo_curso') || '').trim() }
      : courseData;
    // Validación simple en frontend
    // Código es obligatorio solo en edición (en creación se genera automáticamente)
    if (modalType === 'edit' && !('codigo_curso' in payload) ) {
      setError('El código del curso es obligatorio');
      return;
    }
    if (!payload.id_tipo_curso) {
      setError('Debes seleccionar un tipo de curso');
      return;
    }
    
    // Validación adicional: verificar que el código no esté duplicado en BD
    if (modalType === 'create' && payload.codigo_curso) {
      try {
        const response = await fetch(`${API_BASE}/api/cursos?limit=1000`);
        if (response.ok) {
          const cursosData = await response.json();
          const cursosReales = Array.isArray(cursosData) ? cursosData : (Array.isArray(cursosData?.rows) ? cursosData.rows : []);
          
          const codigoExistente = cursosReales.find((curso: any) => 
            curso.codigo_curso && curso.codigo_curso.toLowerCase() === payload.codigo_curso.toLowerCase()
          );
          
          if (codigoExistente) {
            setError(`El código "${payload.codigo_curso}" ya existe en la base de datos. Regenerando...`);
            // Regenerar código automáticamente
            try {
              const nuevoCodigo = await generateCourseCode(payload.id_tipo_curso);
              setAutoGeneratedCode(nuevoCodigo);
              return;
            } catch (genError) {
              setError('Error regenerando código. Intenta de nuevo.');
              return;
            }
          }
        }
      } catch (validateError) {
        console.log('Error validando código duplicado:', validateError);
        // Continuar con la creación si falla la validación
      }
    }
    const dInicio = new Date(payload.fecha_inicio);
    const dFin = new Date(payload.fecha_fin);
    if (!(dInicio instanceof Date) || isNaN(dInicio.getTime())) {
      setError('Fecha de inicio inválida');
      return;
    }
    if (!(dFin instanceof Date) || isNaN(dFin.getTime())) {
      setError('Fecha de fin inválida');
      return;
    }
    if (dFin <= dInicio) {
      setError('La fecha de fin debe ser mayor a la fecha de inicio');
      return;
    }

    try {
      setLoading(true);
      setError(null);
      if (modalType === 'create') {
        const res = await fetch(`${API_BASE}/api/cursos`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        if (!res.ok) {
          let msg = 'No se pudo crear el curso';
          try { const j = await res.json(); if (j?.error) msg = j.error; } catch {}
          throw new Error(msg);
        }
        const newCurso = await res.json();
        // Agregar el nuevo curso a la lista inmediatamente
        setCursos(prev => [newCurso, ...prev]);
      } else if (modalType === 'edit' && selectedCurso) {
        const res = await fetch(`${API_BASE}/api/cursos/${selectedCurso.id_curso}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        if (!res.ok) {
          let msg = 'No se pudo actualizar el curso';
          try { const j = await res.json(); if (j?.error) msg = j.error; } catch {}
          throw new Error(msg);
        }
        const updatedCurso = await res.json();
        // Actualizar el curso en la lista inmediatamente
        setCursos(prev => prev.map(c => 
          c.id_curso === selectedCurso.id_curso 
            ? { ...c, ...updatedCurso }
            : c
        ));
      }
      setShowModal(false);
    } catch (e: any) {
      setError(e.message || 'Error guardando curso');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: '32px' }}>
      {/* Header */}
      <div style={{ marginBottom: '32px' }}>
        <h2 style={{ 
          color: '#fff', fontSize: '2rem', fontWeight: '700', margin: '0 0 8px 0',
          display: 'flex', alignItems: 'center', gap: '12px'
        }}>
          <BookOpen size={32} color="#ef4444" />
          Gestión de Cursos
        </h2>
        <p style={{ color: 'rgba(255,255,255,0.7)', margin: 0 }}>
          Administra los cursos disponibles en la academia
        </p>
      </div>

      {/* Advertencia si no hay tipos de curso */}
      {tiposCursos.length === 0 && (
        <div style={{
          background: 'rgba(251, 191, 36, 0.1)',
          border: '1px solid rgba(251, 191, 36, 0.3)',
          color: '#fbbf24',
          borderRadius: '12px',
          padding: '16px',
          marginBottom: '16px'
        }}>
          <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', gap: '12px' }}>
            <span style={{ fontWeight: 600 }}>Primero crea un "Tipo de Curso" en el módulo Tipos de Curso para poder crear cursos.</span>
          </div>
        </div>
      )}

      {/* Controles */}
      <div style={{
        background: 'linear-gradient(135deg, rgba(0,0,0,0.9) 0%, rgba(26,26,26,0.9) 100%)',
        backdropFilter: 'blur(20px)',
        border: '1px solid rgba(239, 68, 68, 0.2)',
        borderRadius: '20px',
        padding: '24px',
        marginBottom: '24px'
      }}>
        <div style={{ display: 'flex', flexWrap: 'wrap', gap: '16px', alignItems: 'center', justifyContent: 'space-between' }}>
          <div style={{ display: 'flex', gap: '16px', alignItems: 'center', flex: 1 }}>
            {/* Búsqueda */}
            <div style={{ position: 'relative', minWidth: '300px' }}>
              <Search size={20} style={{ position: 'absolute', left: '12px', top: '50%', transform: 'translateY(-50%)', color: 'rgba(255,255,255,0.5)' }} />
              <input
                type="text"
                placeholder="Buscar cursos o instructores..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                style={{
                  width: '100%',
                  padding: '12px 12px 12px 44px',
                  background: 'rgba(255,255,255,0.1)',
                  border: '1px solid rgba(255,255,255,0.2)',
                  borderRadius: '12px',
                  color: '#fff',
                  fontSize: '0.9rem'
                }}
              />
            </div>

            {/* Filtros */}
            <div style={{ minWidth: 200 }}>
              <StyledSelect
                name="filterEstado"
                value={filterEstado}
                onChange={handleFilterEstadoChange}
                options={[
                  { value: 'todos', label: 'Todos los estados' },
                  { value: 'planificado', label: 'Planificados' },
                  { value: 'activo', label: 'Activos' },
                  { value: 'finalizado', label: 'Finalizados' },
                  { value: 'cancelado', label: 'Cancelados' },
                ]}
              />
            </div>
          </div>

          {/* Botón Crear */}
          <button
            onClick={handleCreateCurso}
            disabled={tiposCursos.length === 0}
            style={{
              display: 'flex',
              alignItems: 'center',
              gap: '8px',
              padding: '12px 24px',
              background: tiposCursos.length === 0 ? 'rgba(239, 68, 68, 0.3)' : 'linear-gradient(135deg, #ef4444, #dc2626)',
              border: 'none',
              borderRadius: '12px',
              color: '#fff',
              fontSize: '0.9rem',
              fontWeight: '600',
              cursor: tiposCursos.length === 0 ? 'not-allowed' : 'pointer',
              boxShadow: '0 4px 12px rgba(239, 68, 68, 0.3)'
            }}
          >
            <Plus size={20} />
            Nuevo Curso
          </button>
        </div>
      </div>

      {/* Lista de Cursos */}
      <div style={{ display: 'grid', gap: '20px' }}>
        {cursos
          .filter(c => {
            const matchesSearch = c.nombre.toLowerCase().includes(searchTerm.toLowerCase());
            const matchesEstado = filterEstado === 'todos' || c.estado === filterEstado;
            return matchesSearch && matchesEstado;
          })
          .map((curso) => (
          <div key={curso.id_curso} style={{
            background: 'linear-gradient(135deg, rgba(0,0,0,0.9) 0%, rgba(26,26,26,0.9) 100%)',
            border: '1px solid rgba(239, 68, 68, 0.2)',
            borderRadius: '20px', overflow: 'hidden'
          }}>
            <table style={{ width: '100%', borderCollapse: 'collapse' }}>
              <thead>
                <tr style={{ background: 'rgba(255,255,255,0.05)' }}>
                  <th style={{ padding: '16px', textAlign: 'left', color: 'rgba(255,255,255,0.7)' }}>Código</th>
                  <th style={{ padding: '16px', textAlign: 'left', color: 'rgba(255,255,255,0.7)' }}>Nombre</th>
                  <th style={{ padding: '16px', textAlign: 'left', color: 'rgba(255,255,255,0.7)' }}>Fecha Inicio</th>
                  <th style={{ padding: '16px', textAlign: 'left', color: 'rgba(255,255,255,0.7)' }}>Fecha Fin</th>
                  <th style={{ padding: '16px', textAlign: 'center', color: 'rgba(255,255,255,0.7)' }}>Cupos</th>
                  <th style={{ padding: '16px', textAlign: 'center', color: 'rgba(255,255,255,0.7)' }}>Estado</th>
                  <th style={{ padding: '16px', textAlign: 'right', color: 'rgba(255,255,255,0.7)' }}>Acciones</th>
                </tr>
              </thead>
              <tbody>
                <tr key={`curso-${curso.id_curso}`} style={{ borderTop: '1px solid rgba(255,255,255,0.1)' }}>
                  <td style={{ padding: '16px', color: 'rgba(255,255,255,0.9)' }}>{curso.codigo_curso}</td>
                  <td style={{ padding: '16px', color: '#fff' }}>{curso.nombre}</td>
                  <td style={{ padding: '16px', color: 'rgba(255,255,255,0.8)' }}>{curso.fecha_inicio}</td>
                  <td style={{ padding: '16px', color: 'rgba(255,255,255,0.8)' }}>{curso.fecha_fin}</td>
                  <td style={{ padding: '16px', textAlign: 'center' }}>
                    {curso.estado === 'cancelado' ? (
                      <span style={{
                        padding: '4px 8px',
                        borderRadius: '8px',
                        fontSize: '0.8rem',
                        fontWeight: '600',
                        background: 'rgba(156, 163, 175, 0.2)',
                        color: '#9ca3af'
                      }}>
                        Cerrado
                      </span>
                    ) : (
                      <span style={{
                        padding: '4px 8px',
                        borderRadius: '8px',
                        fontSize: '0.8rem',
                        fontWeight: '600',
                        background: (curso.cupos_disponibles || 0) > 0 ? 'rgba(16, 185, 129, 0.15)' : 'rgba(239, 68, 68, 0.15)',
                        color: (curso.cupos_disponibles || 0) > 0 ? '#10b981' : '#ef4444'
                      }}>
                        {curso.cupos_disponibles || curso.capacidad_maxima || 0} / {curso.capacidad_maxima || 0}
                      </span>
                    )}
                  </td>
                  <td style={{ padding: '16px', textAlign: 'center' }}>
                    <span style={{ padding: '6px 10px', borderRadius: '10px', fontSize: '0.8rem', fontWeight: 700,
                      background: curso.estado === 'activo' ? 'rgba(16, 185, 129, 0.15)'
                               : curso.estado === 'planificado' ? 'rgba(59, 130, 246, 0.15)'
                               : curso.estado === 'finalizado' ? 'rgba(156, 163, 175, 0.2)'
                               : 'rgba(239, 68, 68, 0.15)',
                      color: curso.estado === 'activo' ? '#10b981'
                             : curso.estado === 'planificado' ? '#3b82f6'
                             : curso.estado === 'finalizado' ? '#9ca3af'
                             : '#ef4444' }}>
                      {curso.estado}
                    </span>
                  </td>
                  <td style={{ padding: '16px', textAlign: 'right' }}>
                    <div style={{ display: 'flex', gap: '8px', justifyContent: 'flex-end' }}>
                      <button onClick={() => handleViewCurso(curso)} style={{ background: 'rgba(255,255,255,0.08)', border: '1px solid rgba(255,255,255,0.15)', color: '#fff', padding: '8px 12px', borderRadius: '10px', cursor: 'pointer' }}>
                        <Eye size={16} />
                      </button>
                      <button onClick={() => handleEditCurso(curso)} style={{ background: 'rgba(255,255,255,0.08)', border: '1px solid rgba(255,255,255,0.15)', color: '#fff', padding: '8px 12px', borderRadius: '10px', cursor: 'pointer' }}>
                        <Edit size={16} />
                      </button>
                      <button onClick={() => handleDeleteCurso(curso.id_curso)} style={{ background: 'rgba(239, 68, 68, 0.15)', border: '1px solid rgba(239, 68, 68, 0.3)', color: '#ef4444', padding: '8px 12px', borderRadius: '10px', cursor: 'pointer' }}>
                        <Trash2 size={16} />
                      </button>
                      <button 
                        onClick={() => handleToggleMatricula(curso)} 
                        style={{ 
                          background: curso.estado === 'cancelado' ? 'rgba(16, 185, 129, 0.15)' : 'rgba(239, 68, 68, 0.15)', 
                          border: curso.estado === 'cancelado' ? '1px solid rgba(16, 185, 129, 0.3)' : '1px solid rgba(239, 68, 68, 0.3)', 
                          color: curso.estado === 'cancelado' ? '#10b981' : '#ef4444', 
                          padding: '8px 12px', 
                          borderRadius: '10px', 
                          cursor: 'pointer',
                          fontWeight: '600'
                        }}
                      >
                        {curso.estado === 'cancelado' ? '🔓 Reanudar' : '🔒 Bloquear'}
                      </button>
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
            {loading && (
              <div style={{ padding: '16px', color: 'rgba(255,255,255,0.7)' }}>Cargando...</div>
            )}
            {error && (
              <div style={{ padding: '16px', color: '#ef4444' }}>{error}</div>
            )}
            {(!loading && !error && cursos.length === 0) && (
              <div style={{ padding: '16px', color: 'rgba(255,255,255,0.7)' }}>No hay cursos</div>
            )}
          </div>
        ))}
      </div>

      {/* Modal */}
      {showModal && (
        <div style={{
          position: 'fixed', inset: 0, background: 'rgba(0,0,0,0.6)',
          display: 'flex', alignItems: 'center', justifyContent: 'center',
          zIndex: 50
        }}>
          <div style={{
            background: 'linear-gradient(135deg, rgba(0,0,0,0.95) 0%, rgba(26,26,26,0.95) 100%)',
            border: '1px solid rgba(239, 68, 68, 0.3)',
            borderRadius: '16px', width: 'min(720px, 92vw)', padding: '24px',
            color: '#fff'
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '16px' }}>
              <h3 style={{ margin: 0, fontSize: '1.25rem' }}>
                {modalType === 'create' ? 'Nuevo Curso' : modalType === 'edit' ? 'Editar Curso' : 'Ver Curso'}
              </h3>
              <button onClick={() => setShowModal(false)} style={{ background: 'transparent', border: 'none', color: '#fff', cursor: 'pointer' }}>
                <X />
              </button>
            </div>

            <form onSubmit={handleSubmit}>
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px' }}>
                {/* Fila 1: Código y Tipo de curso */}
                <div>
                  <label style={{ display: 'block', marginBottom: 6, color: 'rgba(255,255,255,0.8)', fontWeight: 600 }}>Código</label>
                  <input 
                    name="codigo_curso" 
                    placeholder="Se genera automáticamente" 
                    value={modalType === 'create' ? autoGeneratedCode : (modalType === 'edit' && autoGeneratedCode ? autoGeneratedCode : selectedCurso?.codigo_curso || '')} 
                    required 
                    disabled={modalType === 'view'}
                    readOnly={true}
                    style={{ 
                      width: '100%', 
                      padding: '12px', 
                      background: 'rgba(255,255,255,0.05)', 
                      border: '1px solid rgba(255,255,255,0.2)', 
                      borderRadius: '10px', 
                      color: 'rgba(255,255,255,0.7)',
                      cursor: 'not-allowed'
                    }} 
                  />
                  <div style={{ marginTop: 6, color: 'rgba(255,255,255,0.55)', fontSize: '0.8rem' }}>Se genera automáticamente basado en el tipo de curso.</div>
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: 6, color: 'rgba(255,255,255,0.8)', fontWeight: 600 }}>Tipo de curso</label>
                  {modalType === 'edit' ? (
                    // En edición: mostrar solo el nombre del tipo (no editable)
                    <div style={{
                      width: '100%',
                      padding: '12px',
                      background: 'rgba(255,255,255,0.05)',
                      border: '1px solid rgba(255,255,255,0.2)',
                      borderRadius: '10px',
                      color: 'rgba(255,255,255,0.8)',
                      fontSize: '0.9rem',
                      display: 'flex',
                      alignItems: 'center',
                      gap: '8px'
                    }}>
                      <span style={{ 
                        background: 'rgba(239, 68, 68, 0.15)', 
                        color: '#ef4444', 
                        padding: '2px 6px', 
                        borderRadius: '4px', 
                        fontSize: '0.7rem', 
                        fontWeight: '600' 
                      }}>
                        TIPO
                      </span>
                      {tiposCursos.find(tc => tc.id_tipo_curso === selectedCurso?.id_tipo_curso)?.nombre || `Tipo ID ${selectedCurso?.id_tipo_curso} (no encontrado)`}
                      <input 
                        type="hidden" 
                        name="id_tipo_curso" 
                        value={selectedCurso?.id_tipo_curso || ''} 
                      />
                    </div>
                  ) : (
                    // En creación: select normal
                    <StyledSelect
                      name="id_tipo_curso"
                      value={selectedTipoCurso || ''}
                      required
                      placeholder="Selecciona un tipo"
                      options={tiposCursos
                        .filter(tc => tc.estado === 'activo') // Solo tipos activos para crear cursos
                        .map(tc => ({ value: tc.id_tipo_curso, label: tc.nombre }))
                      }
                      onChange={handleTipoCursoChange}
                      disabled={modalType === 'view'}
                    />
                  )}
                  {modalType === 'edit' && (
                    <div style={{ marginTop: 6, color: 'rgba(255,255,255,0.55)', fontSize: '0.8rem' }}>
                      El tipo de curso no se puede cambiar en edición.
                    </div>
                  )}
                </div>

                {/* Fila 2: Nombre (izquierda) y Capacidad (derecha) */}
                <div>
                  <label style={{ display: 'block', marginBottom: 6, color: 'rgba(255,255,255,0.8)', fontWeight: 600 }}>Nombre</label>
                  <input 
                    name="nombre" 
                    placeholder={modalType === 'create' ? "Selecciona un tipo de curso primero" : "Nombre del curso"} 
                    defaultValue={modalType === 'edit' ? selectedCurso?.nombre : ''}
                    value={modalType === 'create' ? autoGeneratedName : undefined}
                    required 
                    disabled={modalType === 'view'}
                    readOnly={modalType === 'create'}
                    style={{ 
                      width: '100%', 
                      padding: '12px', 
                      background: modalType === 'edit' ? 'rgba(255,255,255,0.1)' : 'rgba(255,255,255,0.05)', 
                      border: '1px solid rgba(255,255,255,0.2)', 
                      borderRadius: '10px', 
                      color: modalType === 'edit' ? '#fff' : 'rgba(255,255,255,0.7)',
                      cursor: modalType === 'edit' ? 'text' : 'not-allowed'
                    }} 
                  />
                  <div style={{ marginTop: 6, color: 'rgba(255,255,255,0.55)', fontSize: '0.8rem' }}>
                    {modalType === 'create' 
                      ? 'Se completa automáticamente con el nombre del tipo de curso.'
                      : 'Puedes editar el nombre del curso.'
                    }
                  </div>
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: 6, color: 'rgba(255,255,255,0.8)', fontWeight: 600 }}>Capacidad</label>
                  <input 
                    type="number" 
                    name="capacidad_maxima" 
                    defaultValue={modalType === 'edit' ? selectedCurso?.capacidad_maxima : 20} 
                    min={1} 
                    required 
                    disabled={modalType === 'view'}
                    style={{ 
                      width: '100%', 
                      padding: '12px', 
                      background: 'rgba(255,255,255,0.1)', 
                      border: '1px solid rgba(255,255,255,0.2)', 
                      borderRadius: '10px', 
                      color: '#fff' 
                    }} 
                  />
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: 6, color: 'rgba(255,255,255,0.8)', fontWeight: 600 }}>Fecha Inicio</label>
                  <input 
                    type="date" 
                    name="fecha_inicio" 
                    defaultValue={selectedCurso?.fecha_inicio || ''} 
                    required 
                    disabled={modalType === 'view'}
                    style={{ 
                      width: '100%', 
                      padding: '12px', 
                      background: 'rgba(255,255,255,0.1)', 
                      border: '1px solid rgba(255,255,255,0.2)', 
                      borderRadius: '10px', 
                      color: '#fff' 
                    }} 
                  />
                </div>
                <div>
                  <label style={{ display: 'block', marginBottom: 6, color: 'rgba(255,255,255,0.8)', fontWeight: 600 }}>Fecha Fin</label>
                  <input 
                    type="date" 
                    name="fecha_fin" 
                    defaultValue={selectedCurso?.fecha_fin || ''} 
                    required 
                    disabled={modalType === 'view'}
                    style={{ 
                      width: '100%', 
                      padding: '12px', 
                      background: 'rgba(255,255,255,0.1)', 
                      border: '1px solid rgba(255,255,255,0.2)', 
                      borderRadius: '10px', 
                      color: '#fff' 
                    }} 
                  />
                </div>
                {/* Fila extra: Estado a lo ancho para mantener tamaños de fecha iguales */}
                <div style={{ gridColumn: '1 / -1' }}>
                  <label style={{ display: 'block', marginBottom: 6, color: 'rgba(255,255,255,0.8)', fontWeight: 600 }}>Estado</label>
                  <StyledSelect
                    name="estado"
                    defaultValue={selectedCurso?.estado || 'planificado'}
                    options={[
                      { value: 'planificado', label: 'Planificado' },
                      { value: 'activo', label: 'Activo' },
                      { value: 'finalizado', label: 'Finalizado' },
                      { value: 'cancelado', label: 'Cancelado' },
                    ]}
                  />
                </div>
                {/* Separador final */}
                <div style={{ gridColumn: '1 / -1', height: 1, background: 'rgba(255,255,255,0.1)', marginTop: 8 }} />
              </div>

              {modalType !== 'view' && (
                <div style={{ display: 'flex', gap: '12px', marginTop: '32px', justifyContent: 'flex-end' }}>
                  <button
                    type="button"
                    onClick={() => setShowModal(false)}
                    style={{
                      padding: '12px 24px',
                      background: 'rgba(255,255,255,0.1)',
                      border: '1px solid rgba(255,255,255,0.2)',
                      borderRadius: '12px',
                      color: 'rgba(255,255,255,0.7)',
                      cursor: 'pointer'
                    }}
                  >
                    Cancelar
                  </button>
                  <button
                    type="submit"
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '8px',
                      padding: '12px 24px',
                      background: 'linear-gradient(135deg, #ef4444, #dc2626)',
                      border: 'none',
                      borderRadius: '12px',
                      color: '#fff',
                      fontWeight: '600',
                      cursor: 'pointer'
                    }}
                  >
                    <Save size={16} />
                    {modalType === 'create' ? 'Crear Curso' : 'Guardar Cambios'}
                  </button>
                </div>
              )}
            </form>
          </div>
        </div>
      )}
    </div>
  );
};

export default GestionCursos;
